-- ===== SCRIPT SEM WAITFORCHILD - TOTALMENTE SEGURO =====

-- Esperar tudo estar pronto primeiro
if not game:IsLoaded() then
    game.Loaded:Wait()
end

task.wait(2) -- Aguardar um pouco mais para segurança

local Players = game.Players
local ReplicatedStorage = game.ReplicatedStorage  
local Workspace = game.Workspace
local player = Players.LocalPlayer

-- ===== Verificações básicas =====
local function verificarTudo()
    local status = {
        player = player ~= nil,
        workspace = Workspace ~= nil,
        replicatedStorage = ReplicatedStorage ~= nil
    }
    
    if player then
        status.character = player.Character ~= nil
        if player.Character then
            status.humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart") ~= nil
        end
    end
    
    return status
end

-- ===== Função para encontrar mobs SEM waitforchild =====
local function encontrarMobs()
    local mobs = {}
    
    -- Lista de possíveis nomes de pastas
    local nomesPastas = {
        "__Enemies", "DungeonEnemies", "Mobs", "Enemies", 
        "NPCs", "Monsters", "EnemyFolder", "MobFolder"
    }
    
    -- Procurar nas pastas conhecidas
    for _, nomePasta in ipairs(nomesPastas) do
        local pasta = Workspace:FindFirstChild(nomePasta)
        if pasta then
            for _, modelo in pairs(pasta:GetChildren()) do
                if modelo:IsA("Model") then
                    local humanoid = modelo:FindFirstChild("Humanoid")
                    if humanoid and humanoid.Health > 0 then
                        table.insert(mobs, modelo)
                    end
                end
            end
            
            if #mobs > 0 then
                print("📁 Encontrou", #mobs, "mobs na pasta:", nomePasta)
                return mobs
            end
        end
    end
    
    -- Se não encontrou em pastas, procurar diretamente no workspace
    for _, child in pairs(Workspace:GetChildren()) do
        if child:IsA("Model") then
            local humanoid = child:FindFirstChild("Humanoid")
            -- Verificar se parece com um mob (tem humanoid e vida alta)
            if humanoid and humanoid.MaxHealth > 100 and humanoid.Health > 0 then
                table.insert(mobs, child)
            end
        elseif child:IsA("Folder") then
            -- Procurar dentro de pastas
            for _, subchild in pairs(child:GetChildren()) do
                if subchild:IsA("Model") then
                    local humanoid = subchild:FindFirstChild("Humanoid")
                    if humanoid and humanoid.Health > 0 then
                        table.insert(mobs, subchild)
                    end
                end
            end
        end
    end
    
    print("👹 Total de mobs encontrados:", #mobs)
    return mobs
end

-- ===== Função de teleporte segura =====
local function teleportarPara(mob)
    local status = verificarTudo()
    if not (status.player and status.character and status.humanoidRootPart) then
        print("❌ Player não está pronto para teleporte")
        return false
    end
    
    local mobRoot = mob:FindFirstChild("HumanoidRootPart") or 
                   mob:FindFirstChild("Torso") or 
                   mob:FindFirstChild("Head")
    
    if not mobRoot then
        print("❌ Mob sem parte para teleportar:", mob.Name)
        return false
    end
    
    local sucesso = pcall(function()
        player.Character.HumanoidRootPart.CFrame = mobRoot.CFrame * CFrame.new(0, 0, 5)
    end)
    
    if sucesso then
        print("📍 Teleportou para:", mob.Name)
    else
        print("❌ Erro ao teleportar")
    end
    
    return sucesso
end

-- ===== Função de ataque segura =====
local function atacarMob(nomeDoMob)
    -- Tentar encontrar o remote
    local bridgeNet = ReplicatedStorage:FindFirstChild("BridgeNet2")
    if not bridgeNet then
        print("❌ BridgeNet2 não encontrado")
        return false
    end
    
    local remote = bridgeNet:FindFirstChild("dataRemoteEvent")
    if not remote then
        print("❌ Remote não encontrado")
        return false
    end
    
    -- Diferentes tipos de ataque para tentar
    local tiposAtaque = {
        {Event = "Attack", Enemy = nomeDoMob},
        {Event = "Combat", Target = nomeDoMob},
        {Event = "DungeonAttack", Enemy = nomeDoMob},
        {Event = "KillEnemy", Target = nomeDoMob}
    }
    
    local ataqueEnviados = 0
    
    for _, ataque in ipairs(tiposAtaque) do
        local sucesso = pcall(function()
            remote:FireServer({ataque, "\5"})
        end)
        
        if sucesso then
            ataqueEnviados = ataqueEnviados + 1
            task.wait(0.1)
        end
    end
    
    print("⚔️ Atacou:", nomeDoMob, "- Ataques:", ataqueEnviados)
    return ataqueEnviados > 0
end

-- ===== Função principal de combate =====
local function iniciarCombate()
    print("\n🌟 INICIANDO COMBATE")
    
    -- Verificar se tudo está OK
    local status = verificarTudo()
    print("📊 Status do sistema:")
    for item, ok in pairs(status) do
        print("  " .. item .. ":", ok and "✅" or "❌")
    end
    
    if not (status.player and status.character and status.humanoidRootPart) then
        print("❌ Sistema não está pronto")
        return false
    end
    
    -- Loop principal
    local cicloMax = 30
    local ciclo = 0
    
    while ciclo < cicloMax do
        ciclo = ciclo + 1
        print("\n🔄 Ciclo", ciclo, "de", cicloMax)
        
        -- Encontrar mobs
        local mobs = encontrarMobs()
        
        if #mobs == 0 then
            print("🎉 Nenhum mob encontrado - Finalizado!")
            return true
        end
        
        print("🎯 Atacando", #mobs, "mobs...")
        
        -- Atacar cada mob
        for i, mob in ipairs(mobs) do
            local humanoid = mob:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                -- Teleportar
                teleportarPara(mob)
                task.wait(0.5)
                
                -- Atacar
                atacarMob(mob.Name)
                task.wait(0.5)
            end
        end
        
        print("💤 Pausa de 3 segundos...")
        task.wait(3)
    end
    
    print("⏰ Limite de ciclos atingido")
    return false
end

-- ===== Função de debug simples =====
local function debug()
    print("\n🔍 DEBUG RÁPIDO")
    
    local status = verificarTudo()
    for item, ok in pairs(status) do
        print("  " .. item .. ":", ok and "✅" or "❌")
    end
    
    local mobs = encontrarMobs()
    if #mobs > 0 then
        print("📋 Mobs encontrados:")
        for i, mob in ipairs(mobs) do
            local humanoid = mob:FindFirstChild("Humanoid")
            if humanoid then
                print("  " .. i .. ".", mob.Name, "- HP:", math.floor(humanoid.Health))
            end
        end
    else
        print("❌ Nenhum mob encontrado")
    end
    
    -- Verificar remote
    local bridgeNet = ReplicatedStorage:FindFirstChild("BridgeNet2")
    local remote = bridgeNet and bridgeNet:FindFirstChild("dataRemoteEvent")
    print("🔗 Remote disponível:", remote and "✅" or "❌")
    
    print("🔍 FIM DEBUG\n")
end

-- ===== Tentar criar interface apenas se 't' existir =====
local function criarInterface()
    -- Verificar se 't' existe e não dar erro se não existir
    if not _G.t and not t then
        print("⚠️ Interface 't' não encontrada - usando comandos no chat")
        return false
    end
    
    local tab = _G.t or t
    
    local sucesso = pcall(function()
        tab:AddButton({
            Title = "🔍 Debug",
            Description = "Verificar sistema",
            Callback = function()
                debug()
            end
        })

        tab:AddButton({
            Title = "⚔️ Combate",
            Description = "Iniciar combate",
            Callback = function()
                task.spawn(iniciarCombate)
            end
        })

        tab:AddButton({
            Title = "👹 Mobs",
            Description = "Encontrar mobs",
            Callback = function()
                encontrarMobs()
            end
        })

        tab:AddButton({
            Title = "📍 Teleporte",
            Description = "Teleportar para mob",
            Callback = function()
                local mobs = encontrarMobs()
                if #mobs > 0 then
                    teleportarPara(mobs[1])
                end
            end
        })
    end)
    
    return sucesso
end

-- ===== Sistema de comandos por chat =====
local function configurarComandos()
    if player.Chatted then
        player.Chatted:Connect(function(message)
            local msg = message:lower()
            
            if msg == "/debug" then
                debug()
            elseif msg == "/combate" then
                task.spawn(iniciarCombate)
            elseif msg == "/mobs" then
                encontrarMobs()
            elseif msg == "/tp" then
                local mobs = encontrarMobs()
                if #mobs > 0 then
                    teleportarPara(mobs[1])
                end
            elseif msg == "/help" then
                print("🎮 Comandos disponíveis:")
                print("  /debug - Verificar sistema")
                print("  /combate - Iniciar combate")
                print("  /mobs - Encontrar mobs")
                print("  /tp - Teleportar para mob")
                print("  /help - Mostrar comandos")
            end
        end)
        
        print("💬 Comandos de chat ativados! Digite /help para ver os comandos")
    end
end

-- ===== INICIALIZAÇÃO =====
print("🔧 Carregando script...")

-- Aguardar um pouco para tudo estar pronto
task.wait(1)

-- Tentar criar interface, se falhar, usar comandos
if not criarInterface() then
    print("⚠️ Interface não disponível - usando comandos de chat")
    configurarComandos()
else
    print("✅ Interface criada com sucesso!")
    -- Criar comandos também como backup
    configurarComandos()
end

print("✅ Script carregado!")
print("🎮 Use a interface ou digite /help no chat")

-- Auto debug para ver se está tudo OK
debug()