-- ==========================
-- Sistema de Configuração Persistente
-- ==========================
local HttpService = game:GetService("HttpService")

-- Nome do arquivo de configuração
local CONFIG_FILE = "AllanHub_LabyrinthConfig.json"

-- ==========================
-- ConfigSystem Aprimorado
-- ==========================
getgenv().ConfigSystem = getgenv().ConfigSystem or {}

-- Configurações padrão
ConfigSystem.DefaultConfig = {
    LabyrinthToggle = false,
    LabyrinthTeleport = false,
    LabyrinthSpeed = 2,
    LabyrinthSpeedEnabled = false
}

-- Função para carregar configurações do arquivo
function ConfigSystem.LoadConfig()
    local success, result = pcall(function()
        if not isfile or not readfile then
            return nil
        end
        
        if isfile(CONFIG_FILE) then
            local data = readfile(CONFIG_FILE)
            return HttpService:JSONDecode(data)
        end
        return nil
    end)
    
    if success and result then
        print("[ConfigSystem] Configurações carregadas do arquivo")
        return result
    else
        print("[ConfigSystem] Usando configurações padrão")
        return ConfigSystem.DefaultConfig
    end
end

-- Função para salvar configurações no arquivo
function ConfigSystem.SaveConfig()
    local success = pcall(function()
        if not writefile then
            warn("[ConfigSystem] writefile não disponível")
            return
        end
        
        local data = HttpService:JSONEncode(ConfigSystem.CurrentConfig)
        writefile(CONFIG_FILE, data)
        print("[ConfigSystem] Configurações salvas com sucesso")
    end)
    
    if not success then
        warn("[ConfigSystem] Erro ao salvar configurações")
    end
end

-- Função para resetar configurações
function ConfigSystem.ResetConfig()
    ConfigSystem.CurrentConfig = {}
    for k, v in pairs(ConfigSystem.DefaultConfig) do
        ConfigSystem.CurrentConfig[k] = v
    end
    ConfigSystem.SaveConfig()
    print("[ConfigSystem] Configurações resetadas")
end

-- Função para atualizar uma configuração específica
function ConfigSystem.SetConfig(key, value)
    if ConfigSystem.CurrentConfig[key] ~= value then
        ConfigSystem.CurrentConfig[key] = value
        ConfigSystem.SaveConfig()
        print("[ConfigSystem] Configuração atualizada:", key, "=", value)
    end
end

-- Carregar configurações ao iniciar
ConfigSystem.CurrentConfig = ConfigSystem.LoadConfig()

-- ==========================
-- Dependência Fluent UI
-- ==========================
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

-- ==========================
-- Serviços e Variáveis
-- ==========================
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local remote = ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")
local player = game.Players.LocalPlayer

-- ==========================
-- Estado local (carregado da config)
-- ==========================
local labyrinthEnabled = ConfigSystem.CurrentConfig.LabyrinthToggle
local teleportEnabled = ConfigSystem.CurrentConfig.LabyrinthTeleport
local speedEnabled = ConfigSystem.CurrentConfig.LabyrinthSpeedEnabled
local speedValue = ConfigSystem.CurrentConfig.LabyrinthSpeed
local labyrinthSessionActive = false
local autoSpeedThread = nil

local teleportPos = Vector3.new(587.60, 4325.71, -1871.29)
local DUNGEON_ID = 7368292297

-- ==========================
-- Funções de detecção robusta
-- ==========================
local function playerGuiLooksLikeLabyrinth()
    local pg = player:FindFirstChild("PlayerGui")
    if not pg then return false end
    for _, gui in ipairs(pg:GetChildren()) do
        local name = tostring(gui.Name):lower()
        if name:find("labyrinth") or name:find("infinite") or name:find("desert") or name:find("castle") then
            return true
        end
    end
    return false
end

local function isInLabyrinth()
    -- 1) Check __Main.__World naming
    local main = workspace:FindFirstChild("__Main")
    if main then
        local world = main:FindFirstChild("__World")
        if world then
            local wname = tostring(world.Name):lower()
            if wname:find("labyrinth") or wname:find("infinite") then
                return true
            end
        end
    end

    -- 2) Check player position (fallback: altitude used by dungeon worlds)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local pos = player.Character.HumanoidRootPart.Position
        if pos.Y and pos.Y > 4000 then
            return true
        end
    end

    -- 3) Check PlayerGui heuristics
    if playerGuiLooksLikeLabyrinth() then
        return true
    end

    return false
end

-- ==========================
-- Teleporte
-- ==========================
local function teleportToArena()
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = CFrame.new(teleportPos)
    end
end

-- ==========================
-- Eventos (Create / Start / Speed)
-- ==========================
local function safeFire(args)
    if remote then
        pcall(function() remote:FireServer(unpack(args)) end)
    end
end

local function sendCreate()
    local argsCreate = {
        [1] = {
            [1] = {
                ["Event"] = "InfiniteLabyrinthAction",
                ["Action"] = "Create"
            },
            [2] = "\14"
        }
    }
    safeFire(argsCreate)
end

local function sendStart()
    local argsStart = {
        [1] = {
            [1] = {
                ["Dungeon"] = DUNGEON_ID,
                ["Event"] = "InfiniteLabyrinthAction",
                ["Action"] = "Start"
            },
            [2] = "\14"
        }
    }
    safeFire(argsStart)
end

local function sendSpeed(value)
    local argsSpeed = {
        [1] = {
            [1] = {
                ["Speed"] = value,
                ["Event"] = "InfiniteLabyrinthAction",
                ["Action"] = "SpeedUp"
            },
            [2] = "\14"
        }
    }
    safeFire(argsSpeed)
end

-- ==========================
-- Controle de sessão / prevenção de recriação
-- ==========================
local function monitorSession()
    task.spawn(function()
        local consecutiveNotInside = 0
        while labyrinthSessionActive do
            if not isInLabyrinth() then
                consecutiveNotInside = consecutiveNotInside + 1
            else
                consecutiveNotInside = 0
            end

            if consecutiveNotInside >= 3 then
                labyrinthSessionActive = false
                break
            end
            task.wait(2)
        end
    end)
end

local function iniciarDesafio()
    if labyrinthSessionActive then return end

    if isInLabyrinth() then
        labyrinthSessionActive = true
        if speedEnabled then sendSpeed(speedValue) end
        if teleportEnabled then teleportToArena() end
        monitorSession()
        return
    end

    labyrinthSessionActive = true
    sendCreate()
    task.wait(1.2)

    local started = false
    for i = 1, 3 do
        sendStart()
        task.wait(2.5)
        if isInLabyrinth() then
            started = true
            break
        end
    end

    if not started then
        labyrinthSessionActive = false
        return
    end

    if speedEnabled then sendSpeed(speedValue) end
    if teleportEnabled then teleportToArena() end
    monitorSession()
end

local function stopDesafio()
    labyrinthSessionActive = false
end

-- ==========================
-- Auto speed loop (10s)
-- ==========================
local function startAutoSpeedLoop()
    if autoSpeedThread then return end
    autoSpeedThread = task.spawn(function()
        while speedEnabled do
            if isInLabyrinth() then
                sendSpeed(speedValue)
            end
            task.wait(10)
        end
        autoSpeedThread = nil
    end)
end

local function stopAutoSpeedLoop()
    speedEnabled = false
    if autoSpeedThread then
        autoSpeedThread = nil
    end
end

-- ==========================
-- GUI - Fluent
-- ==========================
local Window = Fluent:CreateWindow({
    Title = "Allan Hub - Infinite Labyrinth",
    SubTitle = "By Allan | Config Persistente",
    TabWidth = 160,
    Size = UDim2.fromOffset(520, 380),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.End
})

local Tab = Window:AddTab({ Title = "Dungeon", Icon = "Sword" })
local ConfigTab = Window:AddTab({ Title = "Configurações", Icon = "Settings" })

-- ==========================
-- TAB DUNGEON
-- ==========================

-- Toggle principal
Tab:AddToggle("LabyrinthToggle", {
    Title = "Ativar Evento Infinite Labyrinth",
    Default = labyrinthEnabled,
    Callback = function(value)
        labyrinthEnabled = value
        ConfigSystem.SetConfig("LabyrinthToggle", value)

        if value then
            iniciarDesafio()
            Fluent:Notify({ 
                Title = "Labyrinth", 
                Content = "Evento ativado e salvo!", 
                Duration = 3 
            })
        else
            stopDesafio()
            Fluent:Notify({ 
                Title = "Labyrinth", 
                Content = "Evento desativado e salvo.", 
                Duration = 3 
            })
        end
    end
})

-- Teleporte toggle
Tab:AddToggle("LabyrinthTeleport", {
    Title = "Teleporte para o centro da arena",
    Default = teleportEnabled,
    Callback = function(value)
        teleportEnabled = value
        ConfigSystem.SetConfig("LabyrinthTeleport", value)

        if value then
            if isInLabyrinth() then teleportToArena() end
            Fluent:Notify({ 
                Title = "Teleport", 
                Content = "Teleporte ativado e salvo!", 
                Duration = 3 
            })
        else
            Fluent:Notify({ 
                Title = "Teleport", 
                Content = "Teleporte desativado e salvo.", 
                Duration = 3 
            })
        end
    end
})

-- Speed enable toggle
Tab:AddToggle("LabyrinthSpeedEnable", {
    Title = "Ativar Modo Velocidade (reaplica a cada 10s)",
    Default = speedEnabled,
    Callback = function(value)
        speedEnabled = value
        ConfigSystem.SetConfig("LabyrinthSpeedEnabled", value)

        if value then
            if isInLabyrinth() then
                sendSpeed(speedValue)
            end
            startAutoSpeedLoop()
            Fluent:Notify({ 
                Title = "Speed", 
                Content = "Velocidade ativada ("..speedValue.."x) e salva!", 
                Duration = 3 
            })
        else
            stopAutoSpeedLoop()
            Fluent:Notify({ 
                Title = "Speed", 
                Content = "Velocidade desativada e salva.", 
                Duration = 3 
            })
        end
    end
})

-- Dropdown velocidade
Tab:AddDropdown("LabyrinthSpeedDropdown", {
    Title = "Velocidade",
    Values = {"1x","2x","3x"},
    Default = tostring(speedValue) .. "x",
    Multi = false,
    Callback = function(value)
        local n = tonumber(value:sub(1,1))
        if n then
            speedValue = n
            ConfigSystem.SetConfig("LabyrinthSpeed", n)
            Fluent:Notify({ 
                Title = "Speed", 
                Content = "Velocidade "..n.."x salva!", 
                Duration = 2 
            })
            if speedEnabled and isInLabyrinth() then
                sendSpeed(speedValue)
            end
        end
    end
})

-- Debug button
Tab:AddButton({
    Title = "Checar status (debug)",
    Callback = function()
        local inside = isInLabyrinth()
        Fluent:Notify({ 
            Title = "Debug", 
            Content = inside and "✅ DENTRO do Labirinto" or "❌ FORA do Labirinto", 
            Duration = 4 
        })
    end
})

-- Reset state button
Tab:AddButton({
    Title = "Resetar estado da sessão",
    Callback = function()
        labyrinthSessionActive = false
        stopAutoSpeedLoop()
        Fluent:Notify({ 
            Title = "Reset", 
            Content = "Estado da sessão reiniciado.", 
            Duration = 3 
        })
    end
})

-- ==========================
-- TAB CONFIGURAÇÕES
-- ==========================

ConfigTab:AddParagraph({
    Title = "Sistema de Salvamento",
    Content = "Suas configurações são salvas automaticamente em um arquivo. Ao recarregar o script, tudo será restaurado!"
})

ConfigTab:AddButton({
    Title = "🔄 Recarregar Configurações",
    Description = "Recarrega as configs do arquivo",
    Callback = function()
        local loaded = ConfigSystem.LoadConfig()
        for k, v in pairs(loaded) do
            ConfigSystem.CurrentConfig[k] = v
        end
        
        -- Atualiza variáveis locais
        labyrinthEnabled = ConfigSystem.CurrentConfig.LabyrinthToggle
        teleportEnabled = ConfigSystem.CurrentConfig.LabyrinthTeleport
        speedEnabled = ConfigSystem.CurrentConfig.LabyrinthSpeedEnabled
        speedValue = ConfigSystem.CurrentConfig.LabyrinthSpeed
        
        Fluent:Notify({ 
            Title = "Config", 
            Content = "Configurações recarregadas!", 
            Duration = 3 
        })
    end
})

ConfigTab:AddButton({
    Title = "🗑️ Resetar para Padrão",
    Description = "Restaura todas as configurações padrão",
    Callback = function()
        ConfigSystem.ResetConfig()
        
        -- Atualiza variáveis locais
        labyrinthEnabled = false
        teleportEnabled = false
        speedEnabled = false
        speedValue = 2
        
        stopDesafio()
        stopAutoSpeedLoop()
        
        Fluent:Notify({ 
            Title = "Config", 
            Content = "Configurações resetadas! Recarregue o script.", 
            Duration = 4 
        })
    end
})

ConfigTab:AddButton({
    Title = "📋 Ver Configurações Atuais",
    Description = "Mostra no console as configs salvas",
    Callback = function()
        print("=== CONFIGURAÇÕES ATUAIS ===")
        for k, v in pairs(ConfigSystem.CurrentConfig) do
            print(k, "=", v)
        end
        print("============================")
        
        Fluent:Notify({ 
            Title = "Config", 
            Content = "Verifique o console (F9)", 
            Duration = 3 
        })
    end
})

-- Informação sobre o arquivo
ConfigTab:AddParagraph({
    Title = "Informação Técnica",
    Content = "Arquivo: " .. CONFIG_FILE .. "\nLocalização: workspace folder do executor"
})

Window:SelectTab(1)

-- ==========================
-- Inicialização (aplica salvados)
-- ==========================
-- Aguarda um pouco para garantir que tudo está carregado
task.wait(0.5)

if labyrinthEnabled then
    iniciarDesafio()
end

if teleportEnabled and isInLabyrinth() then
    teleportToArena()
end

if speedEnabled then
    if isInLabyrinth() then 
        sendSpeed(speedValue) 
    end
    startAutoSpeedLoop()
end

Fluent:Notify({ 
    Title = "Allan Hub", 
    Content = "✅ Configurações carregadas com sucesso!", 
    Duration = 4 
})