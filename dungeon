-- ==========================
-- Dependência Fluent UI
-- ==========================
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

-- ==========================
-- Serviços e Variáveis
-- ==========================
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local remote = ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")
local player = game.Players.LocalPlayer

-- ==========================
-- ConfigSystem (fallbacks)
-- ==========================
getgenv().ConfigSystem = getgenv().ConfigSystem or {}
ConfigSystem.DefaultConfig = ConfigSystem.DefaultConfig or {}
ConfigSystem.CurrentConfig = ConfigSystem.CurrentConfig or {}

-- Defaults
if ConfigSystem.DefaultConfig.LabyrinthToggle == nil then ConfigSystem.DefaultConfig.LabyrinthToggle = false end
if ConfigSystem.DefaultConfig.LabyrinthTeleport == nil then ConfigSystem.DefaultConfig.LabyrinthTeleport = false end
if ConfigSystem.DefaultConfig.LabyrinthSpeed == nil then ConfigSystem.DefaultConfig.LabyrinthSpeed = 2 end
if ConfigSystem.DefaultConfig.LabyrinthSpeedEnabled == nil then ConfigSystem.DefaultConfig.LabyrinthSpeedEnabled = false end

-- Current fallback
if ConfigSystem.CurrentConfig.LabyrinthToggle == nil then ConfigSystem.CurrentConfig.LabyrinthToggle = ConfigSystem.DefaultConfig.LabyrinthToggle end
if ConfigSystem.CurrentConfig.LabyrinthTeleport == nil then ConfigSystem.CurrentConfig.LabyrinthTeleport = ConfigSystem.DefaultConfig.LabyrinthTeleport end
if ConfigSystem.CurrentConfig.LabyrinthSpeed == nil then ConfigSystem.CurrentConfig.LabyrinthSpeed = ConfigSystem.DefaultConfig.LabyrinthSpeed end
if ConfigSystem.CurrentConfig.LabyrinthSpeedEnabled == nil then ConfigSystem.CurrentConfig.LabyrinthSpeedEnabled = ConfigSystem.DefaultConfig.LabyrinthSpeedEnabled end

-- Helpers de SaveConfig
local function SaveConfig()
    if type(ConfigSystem.SaveConfig) == "function" then
        pcall(ConfigSystem.SaveConfig)
    end
end

-- ==========================
-- Estado local
-- ==========================
local labyrinthEnabled = ConfigSystem.CurrentConfig.LabyrinthToggle
local teleportEnabled = ConfigSystem.CurrentConfig.LabyrinthTeleport
local speedEnabled = ConfigSystem.CurrentConfig.LabyrinthSpeedEnabled
local speedValue = ConfigSystem.CurrentConfig.LabyrinthSpeed
local labyrinthSessionActive = false
local autoSpeedThread = nil

local teleportPos = Vector3.new(587.60, 4325.71, -1871.29)
local DUNGEON_ID = 7368292297

-- ==========================
-- Funções de detecção robusta
-- ==========================
local function playerGuiLooksLikeLabyrinth()
    local pg = player:FindFirstChild("PlayerGui")
    if not pg then return false end
    for _, gui in ipairs(pg:GetChildren()) do
        local name = tostring(gui.Name):lower()
        if name:find("labyrinth") or name:find("infinite") or name:find("desert") or name:find("castle") then
            return true
        end
    end
    return false
end

local function isInLabyrinth()
    -- 1) Check __Main.__World naming
    local main = workspace:FindFirstChild("__Main")
    if main then
        local world = main:FindFirstChild("__World")
        if world then
            local wname = tostring(world.Name):lower()
            if wname:find("labyrinth") or wname:find("infinite") then
                return true
            end
        end
    end

    -- 2) Check player position (fallback: altitude used by dungeon worlds)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local pos = player.Character.HumanoidRootPart.Position
        if pos.Y and pos.Y > 4000 then
            return true
        end
    end

    -- 3) Check PlayerGui heuristics
    if playerGuiLooksLikeLabyrinth() then
        return true
    end

    return false
end

-- ==========================
-- Teleporte
-- ==========================
local function teleportToArena()
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = CFrame.new(teleportPos)
    end
end

-- ==========================
-- Eventos (Create / Start / Speed)
-- ==========================
local function safeFire(args)
    if remote then
        pcall(function() remote:FireServer(unpack(args)) end)
    end
end

local function sendCreate()
    local argsCreate = {
        [1] = {
            [1] = {
                ["Event"] = "InfiniteLabyrinthAction",
                ["Action"] = "Create"
            },
            [2] = "\14"
        }
    }
    safeFire(argsCreate)
end

local function sendStart()
    local argsStart = {
        [1] = {
            [1] = {
                ["Dungeon"] = DUNGEON_ID,
                ["Event"] = "InfiniteLabyrinthAction",
                ["Action"] = "Start"
            },
            [2] = "\14"
        }
    }
    safeFire(argsStart)
end

local function sendSpeed(value)
    local argsSpeed = {
        [1] = {
            [1] = {
                ["Speed"] = value,
                ["Event"] = "InfiniteLabyrinthAction",
                ["Action"] = "SpeedUp"
            },
            [2] = "\14"
        }
    }
    safeFire(argsSpeed)
end

-- ==========================
-- Controle de sessão / prevenção de recriação
-- ==========================
local function monitorSession()
    -- Monitora saída do labirinto e atualiza estado
    task.spawn(function()
        local consecutiveNotInside = 0
        while labyrinthSessionActive do
            if not isInLabyrinth() then
                consecutiveNotInside = consecutiveNotInside + 1
            else
                consecutiveNotInside = 0
            end

            if consecutiveNotInside >= 3 then
                -- Acha que saiu
                labyrinthSessionActive = false
                break
            end
            task.wait(2)
        end
    end)
end

local function iniciarDesafio()
    if labyrinthSessionActive then return end

    -- Se já estiver dentro, não recria
    if isInLabyrinth() then
        labyrinthSessionActive = true
        -- reaplica speed/teleporte caso necessário
        if speedEnabled then sendSpeed(speedValue) end
        if teleportEnabled then teleportToArena() end
        monitorSession()
        return
    end

    labyrinthSessionActive = true
    -- Tenta criar e iniciar com checagens
    sendCreate()
    task.wait(1.2)

    local started = false
    for i = 1, 3 do
        sendStart()
        task.wait(2.5)
        if isInLabyrinth() then
            started = true
            break
        end
    end

    if not started then
        -- falhou, reseta estado
        labyrinthSessionActive = false
        return
    end

    -- Sucesso: aplica speed/teleporte se necessário
    if speedEnabled then sendSpeed(speedValue) end
    if teleportEnabled then teleportToArena() end
    monitorSession()
end

local function stopDesafio()
    labyrinthSessionActive = false
end

-- ==========================
-- Auto speed loop (10s)
-- ==========================
local function startAutoSpeedLoop()
    if autoSpeedThread then return end
    autoSpeedThread = task.spawn(function()
        while speedEnabled do
            -- reaplica apenas se estiver dentro do Labyrinth
            if isInLabyrinth() then
                sendSpeed(speedValue)
            end
            task.wait(10)
        end
        autoSpeedThread = nil
    end)
end

local function stopAutoSpeedLoop()
    speedEnabled = false
    if autoSpeedThread then
        -- não há cancel task seguro em todos os ambientes; sinalizamos variável
        autoSpeedThread = nil
    end
end

-- ==========================
-- GUI - Fluent
-- ==========================
local Window = Fluent:CreateWindow({
    Title = "Allan Hub - Infinite Labyrinth",
    SubTitle = "By Allan",
    TabWidth = 160,
    Size = UDim2.fromOffset(520, 360),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.End
})

local Tab = Window:AddTab({ Title = "Dungeon", Icon = "Sword" })

-- Evento toggle
Tab:AddToggle("LabyrinthToggle", {
    Title = "Ativar Evento Infinite Labyrinth",
    Default = labyrinthEnabled,
    Callback = function(value)
        labyrinthEnabled = value
        ConfigSystem.CurrentConfig.LabyrinthToggle = value
        SaveConfig()

        if value then
            iniciarDesafio()
            Fluent:Notify({ Title = "Labyrinth", Content = "Tentando iniciar evento...", Duration = 3 })
        else
            stopDesafio()
            Fluent:Notify({ Title = "Labyrinth", Content = "Evento desativado.", Duration = 3 })
        end
    end
})

-- Teleporte toggle
Tab:AddToggle("LabyrinthTeleport", {
    Title = "Teleporte para o centro da arena",
    Default = teleportEnabled,
    Callback = function(value)
        teleportEnabled = value
        ConfigSystem.CurrentConfig.LabyrinthTeleport = value
        SaveConfig()

        if value then
            if isInLabyrinth() then teleportToArena() end
            Fluent:Notify({ Title = "Teleport", Content = "Teleporte ativado.", Duration = 3 })
        else
            Fluent:Notify({ Title = "Teleport", Content = "Teleporte desativado.", Duration = 3 })
        end
    end
})

-- Speed enable toggle
Tab:AddToggle("LabyrinthSpeedEnable", {
    Title = "Ativar Modo Velocidade (reaplica a cada 10s)",
    Default = speedEnabled,
    Callback = function(value)
        speedEnabled = value
        ConfigSystem.CurrentConfig.LabyrinthSpeedEnabled = value
        SaveConfig()

        if value then
            -- aplica imediamente se estiver dentro
            if isInLabyrinth() then
                sendSpeed(speedValue)
            end
            startAutoSpeedLoop()
            Fluent:Notify({ Title = "Speed", Content = "Modo velocidade ativado ("..tostring(speedValue).."x).", Duration = 3 })
        else
            stopAutoSpeedLoop()
            Fluent:Notify({ Title = "Speed", Content = "Modo velocidade desativado.", Duration = 3 })
        end
    end
})

-- Dropdown velocidade
Tab:AddDropdown("LabyrinthSpeedDropdown", {
    Title = "Velocidade",
    Values = {"1x","2x","3x"},
    Default = tostring(speedValue) .. "x",
    Multi = false,
    Callback = function(value)
        local n = tonumber(value:sub(1,1))
        if n then
            speedValue = n
            ConfigSystem.CurrentConfig.LabyrinthSpeed = n
            SaveConfig()
            Fluent:Notify({ Title = "Speed", Content = "Velocidade salva: "..n.."x", Duration = 2 })
            if speedEnabled and isInLabyrinth() then
                sendSpeed(speedValue)
            end
        end
    end
})

-- Debug button
Tab:AddButton({
    Title = "Checar status (debug)",
    Callback = function()
        local inside = isInLabyrinth()
        Fluent:Notify({ Title = "Debug", Content = inside and "DENTRO do Labirinto" or "FORA do Labirinto", Duration = 4 })
    end
})

-- Reset state button
Tab:AddButton({
    Title = "Resetar estado",
    Callback = function()
        labyrinthSessionActive = false
        stopAutoSpeedLoop()
        Fluent:Notify({ Title = "Reset", Content = "Estado reiniciado.", Duration = 3 })
    end
})

Window:SelectTab(1)

-- ==========================
-- Inicialização (aplica salvados)
-- ==========================
-- Se já estava habilitado ao carregar, tenta iniciar/reativar sem recriar se já dentro
if labyrinthEnabled then
    iniciarDesafio()
end
if teleportEnabled and isInLabyrinth() then
    teleportToArena()
end
if speedEnabled then
    -- reaplica speed se já dentro e inicia loop
    if isInLabyrinth() then sendSpeed(speedValue) end
    startAutoSpeedLoop()
end

Fluent:Notify({ Title = "Allan Hub", Content = "Configurações carregadas.", Duration = 3 })
