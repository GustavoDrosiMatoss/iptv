local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer

-- ===== Fun√ß√µes auxiliares seguras =====
local function safeGetService(serviceName)
    local success, service = pcall(function()
        return game:GetService(serviceName)
    end)
    return success and service or nil
end

local function safeWaitForChild(parent, childName, timeout)
    timeout = timeout or 3
    local child = nil
    
    local success = pcall(function()
        local startTime = tick()
        while not child and tick() - startTime < timeout do
            child = parent:FindFirstChild(childName)
            if not child then
                task.wait(0.1)
            end
        end
    end)
    
    return success and child or nil
end

local function safeFireServer(remote, ...)
    if not remote then return false end
    
    local success = pcall(function()
        remote:FireServer(...)
    end)
    
    return success
end

-- ===== Verificar se player est√° pronto =====
local function isPlayerReady()
    return player and player.Character and player.Character:FindFirstChild("HumanoidRootPart")
end

-- ===== Detec√ß√£o de Dungeon SIMPLIFICADA =====
local isInDungeon = function()
    -- M√©todo 1: Verificar pastas conhecidas no workspace
    local dungeonFolders = {
        "__Enemies", "DungeonEnemies", "Mobs", "Enemies", 
        "NPCs", "Monsters", "EnemyFolder", "MobFolder"
    }
    
    for _, folderName in ipairs(dungeonFolders) do
        if Workspace:FindFirstChild(folderName) then
            print("‚úÖ Dungeon detectada por pasta:", folderName)
            return true
        end
    end
    
    -- M√©todo 2: Procurar por modelos com Humanoid no workspace
    local mobCount = 0
    for _, child in pairs(Workspace:GetChildren()) do
        if child:IsA("Model") and child:FindFirstChild("Humanoid") then
            local humanoid = child:FindFirstChild("Humanoid")
            if humanoid and humanoid.MaxHealth > 100 then -- Provavelmente √© um mob
                mobCount = mobCount + 1
            end
        elseif child:IsA("Folder") then
            for _, subchild in pairs(child:GetChildren()) do
                if subchild:IsA("Model") and subchild:FindFirstChild("Humanoid") then
                    mobCount = mobCount + 1
                end
            end
        end
    end
    
    if mobCount >= 3 then
        print("‚úÖ Dungeon detectada por contagem de mobs:", mobCount)
        return true
    end
    
    -- M√©todo 3: Verificar UI (sem WaitForChild)
    local playerGui = player:FindFirstChild("PlayerGui")
    if playerGui then
        local dungeonTerms = {"inimigos", "enemies", "boss", "wave", "sala", "room"}
        
        for _, gui in pairs(playerGui:GetChildren()) do
            if gui:IsA("ScreenGui") and gui.Enabled then
                for _, descendant in pairs(gui:GetDescendants()) do
                    if descendant:IsA("TextLabel") and descendant.Visible then
                        local text = descendant.Text:lower()
                        for _, term in ipairs(dungeonTerms) do
                            if text:find(term) then
                                print("‚úÖ Dungeon detectada por UI:", descendant.Text)
                                return true
                            end
                        end
                    end
                end
            end
        end
    end
    
    return false
end

-- ===== Encontrar mobs de forma segura =====
local encontrarMobs = function()
    local mobs = {}
    
    -- Procurar em pastas conhecidas primeiro
    local dungeonFolders = {
        "__Enemies", "DungeonEnemies", "Mobs", "Enemies", "NPCs", "Monsters"
    }
    
    for _, folderName in ipairs(dungeonFolders) do
        local folder = Workspace:FindFirstChild(folderName)
        if folder then
            for _, mob in pairs(folder:GetChildren()) do
                if mob:IsA("Model") then
                    local humanoid = mob:FindFirstChild("Humanoid")
                    if humanoid and humanoid.Health > 0 then
                        table.insert(mobs, mob)
                    end
                end
            end
            
            if #mobs > 0 then
                print("üìÅ Mobs encontrados na pasta:", folderName, "- Quantidade:", #mobs)
                return mobs
            end
        end
    end
    
    -- Se n√£o encontrou em pastas, procurar no workspace
    for _, child in pairs(Workspace:GetChildren()) do
        if child:IsA("Model") and child.Name:lower():find("mob") or child.Name:lower():find("enemy") then
            local humanoid = child:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 and humanoid.MaxHealth > 100 then
                table.insert(mobs, child)
            end
        elseif child:IsA("Folder") then
            local folderMobs = 0
            for _, subchild in pairs(child:GetChildren()) do
                if subchild:IsA("Model") then
                    local humanoid = subchild:FindFirstChild("Humanoid")
                    if humanoid and humanoid.Health > 0 then
                        table.insert(mobs, subchild)
                        folderMobs = folderMobs + 1
                    end
                end
            end
            if folderMobs > 0 then
                print("üìÅ Mobs encontrados em:", child.Name, "- Quantidade:", folderMobs)
            end
        end
    end
    
    print("üëπ Total de mobs encontrados:", #mobs)
    return mobs
end

-- ===== Teleporte ultra seguro =====
local teleportToMob = function(mob)
    if not isPlayerReady() then
        print("‚ùå Player n√£o est√° pronto")
        return false
    end
    
    local character = player.Character
    local root = character.HumanoidRootPart
    
    local mobRoot = mob:FindFirstChild("HumanoidRootPart") or 
                   mob:FindFirstChild("Torso") or 
                   mob:FindFirstChild("Head")
    
    if not mobRoot then
        print("‚ùå Mob sem root part:", mob.Name)
        return false
    end
    
    local success = pcall(function()
        root.CFrame = mobRoot.CFrame * CFrame.new(0, 0, 5)
    end)
    
    if success then
        print("üìç Teleportado para:", mob.Name)
        return true
    else
        print("‚ùå Falha no teleporte para:", mob.Name)
        return false
    end
end

-- ===== Sistema de ataque simplificado =====
local atacarMob = function(mobName)
    -- Tentar encontrar o remote de forma segura
    local bridgeNet = ReplicatedStorage:FindFirstChild("BridgeNet2")
    if not bridgeNet then
        print("‚ùå BridgeNet2 n√£o encontrado")
        return false
    end
    
    local remote = bridgeNet:FindFirstChild("dataRemoteEvent")
    if not remote then
        print("‚ùå dataRemoteEvent n√£o encontrado")
        return false
    end
    
    -- Lista de ataques para tentar
    local attacks = {
        { Event = "Attack", Enemy = mobName },
        { Event = "Combat", Target = mobName },
        { Event = "DungeonAttack", Enemy = mobName },
        { Event = "KillEnemy", Target = mobName },
        { Event = "AttackMob", Mob = mobName },
        { Action = "Attack", Target = mobName },
        { Type = "Attack", Enemy = mobName }
    }
    
    local attacksSent = 0
    for _, attackData in ipairs(attacks) do
        if safeFireServer(remote, { attackData, "\5" }) then
            attacksSent = attacksSent + 1
            task.wait(0.05)
        end
    end
    
    print("‚öîÔ∏è Atacando:", mobName, "- Ataques enviados:", attacksSent)
    return attacksSent > 0
end

-- ===== Fun√ß√£o principal SIMPLIFICADA =====
local executarCombate = function()
    print("\nüåü === INICIANDO COMBATE ===")
    
    -- Verificar se est√° em dungeon
    if not isInDungeon() then
        print("‚ùå N√£o detectou dungeon")
        return false
    end
    
    -- Aguardar um pouco para tudo carregar
    print("‚è≥ Aguardando 3 segundos para inicializar...")
    task.wait(3)
    
    local maxCycles = 50 -- M√°ximo de 50 ciclos
    local cycle = 0
    
    while cycle < maxCycles do
        cycle = cycle + 1
        print("\nüîÑ Ciclo", cycle .. "/" .. maxCycles)
        
        -- Verificar se player est√° pronto
        if not isPlayerReady() then
            print("‚è≥ Aguardando player ficar pronto...")
            task.wait(2)
            continue
        end
        
        -- Encontrar mobs
        local mobs = encontrarMobs()
        if #mobs == 0 then
            print("üéâ Nenhum mob encontrado - Combate finalizado!")
            return true
        end
        
        print("üëπ Mobs restantes:", #mobs)
        
        -- Atacar todos os mobs
        for i, mob in ipairs(mobs) do
            local humanoid = mob:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                -- Teleportar para o mob
                if teleportToMob(mob) then
                    task.wait(0.5)
                end
                
                -- Atacar
                atacarMob(mob.Name)
                
                -- Pequena pausa entre ataques
                task.wait(0.5)
            end
        end
        
        -- Pausa maior entre ciclos
        print("üí§ Pausa de 3 segundos...")
        task.wait(3)
    end
    
    print("‚è∞ Limite de ciclos atingido")
    return false
end

-- ===== Debug simplificado =====
local debugSimples = function()
    print("\nüîç === DEBUG SIMPLES ===")
    print("üè∞ Em dungeon:", isInDungeon())
    print("üë§ Player pronto:", isPlayerReady())
    
    local mobs = encontrarMobs()
    print("üëπ Mobs encontrados:", #mobs)
    
    if #mobs > 0 then
        for i, mob in ipairs(mobs) do
            local humanoid = mob:FindFirstChild("Humanoid")
            if humanoid then
                print("  " .. i .. ".", mob.Name, "- HP:", math.floor(humanoid.Health))
            end
        end
    end
    
    local bridgeNet = ReplicatedStorage:FindFirstChild("BridgeNet2")
    local remote = bridgeNet and bridgeNet:FindFirstChild("dataRemoteEvent")
    print("üîó Remote dispon√≠vel:", remote and "‚úÖ" or "‚ùå")
    
    print("üîç === FIM DEBUG ===\n")
end

-- ===== Interface (assumindo que 't' existe) =====
if t then
    t:AddButton({
        Title = "üîç Debug R√°pido",
        Description = "Verifica√ß√£o b√°sica do sistema",
        Callback = function()
            debugSimples()
        end
    })

    t:AddButton({
        Title = "‚öîÔ∏è Iniciar Combate",
        Description = "Executar combate completo",
        Callback = function()
            task.spawn(executarCombate)
        end
    })

    t:AddButton({
        Title = "üëπ Encontrar Mobs",
        Description = "Mostrar mobs dispon√≠veis",
        Callback = function()
            local mobs = encontrarMobs()
            print("Mobs encontrados:", #mobs)
        end
    })

    t:AddButton({
        Title = "üìç Teleporte Teste",
        Description = "Teleportar para primeiro mob",
        Callback = function()
            local mobs = encontrarMobs()
            if #mobs > 0 then
                teleportToMob(mobs[1])
            else
                print("‚ùå Nenhum mob para teleportar")
            end
        end
    })
end

print("‚úÖ Script robusto carregado!")

-- Auto-executar se em dungeon
if isInDungeon() then
    print("üéØ Dungeon detectada - executando em 5 segundos...")
    task.wait(5)
    task.spawn(executarCombate)
end