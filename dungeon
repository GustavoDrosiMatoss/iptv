local ativarEvento   = false
local ativarDungeon  = false
local ativarGems     = false
local ativarFly      = false  -- Nova flag para voar
local andarEntrada   = 10
local andarSaida     = 1
local currentFloor   = 0
local configFile     = "allan_hub_castelo.json"
local tempFile       = "temp_dungeon.json"
local dungeonActive  = false  -- Nova flag para controle

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

-- Configura√ß√µes de voo
local FLIGHT_SPEED = 500 -- Velocidade de voo
local FLIGHT_HEIGHT = 5 -- Altura acima do mob

-- ===== Compat de arquivos =====
local function safeDelete(path)
    if isfile and isfile(path) then
        if delfile then delfile(path)
        elseif deletefile then deletefile(path)
        else writefile(path, "") end
    end
end

-- ===== Salvar/Carregar =====
local function salvarConfig()
    local data = {
        entrada = andarEntrada, saida = andarSaida,
        evento = ativarEvento, dungeon = ativarDungeon, gems = ativarGems,
        fly = ativarFly, dungeonActive = dungeonActive
    }
    writefile(configFile, HttpService:JSONEncode(data))
end

local function carregarConfig()
    if isfile and isfile(configFile) then
        local data = HttpService:JSONDecode(readfile(configFile))
        andarEntrada  = tonumber(data.entrada) or andarEntrada
        andarSaida    = tonumber(data.saida) or andarSaida
        ativarEvento  = data.evento or false
        ativarDungeon = data.dungeon or false
        ativarGems    = data.gems or false
        ativarFly     = data.fly or false
        dungeonActive = data.dungeonActive or false
    else
        salvarConfig()
    end
end
carregarConfig()

-- ===== Verifica√ß√µes =====
local isInDungeon = function()
    local enemies = workspace:FindFirstChild("__Enemies")
    local dungeonFolder = workspace:FindFirstChild("Dungeon")
    return enemies ~= nil or dungeonFolder ~= nil
end

local mobsVivos = function()
    local folder = workspace:FindFirstChild("__Enemies")
    if not folder then return false end
    local count = 0
    for _, mob in ipairs(folder:GetChildren()) do
        if mob:IsA("Model") then
            local humanoid = mob:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                count = count + 1
            end
        end
    end
    print("üéØ Mobs vivos encontrados:", count)
    return count > 0
end

-- ===== A√ß√µes =====
local entrarCastelo = function()
    print("üè∞ Entrando no castelo - Andar:", andarEntrada)
    local args = {
        [1] = { [1] = { Check = true, Floor = tostring(andarEntrada), Event = "CastleAction", Action = "Join" }, [2] = "\12" }
    }
    game.ReplicatedStorage.BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
end

local sairCastelo = function()
    print("üö™ Saindo do castelo")
    local args = {
        [1] = { [1] = { Check = true, Floor = tostring(andarSaida), Event = "CastleAction", Action = "LeaveDungeon" }, [2] = "\12" }
    }
    game.ReplicatedStorage.BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
    dungeonActive = false
    salvarConfig()
    safeDelete(tempFile)
end

local iniciarDungeon = function()
    print("‚ñ∂Ô∏è Iniciando dungeon...")
    local args = { [1] = { [1] = { Event = "DungeonAction", Action = "Start" }, [2] = "\12" } }
    game.ReplicatedStorage.BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
end

local criarDungeon = function()
    if dungeonActive then 
        print("‚ö†Ô∏è Dungeon j√° est√° ativa, pulando cria√ß√£o")
        return 
    end
    if isInDungeon() then 
        print("‚ö†Ô∏è J√° est√° em uma dungeon")
        dungeonActive = true
        salvarConfig()
        return 
    end
    print("üÜï Criando nova dungeon...")
    local args = { [1] = { [1] = { Event = "DungeonAction", Action = "Create" }, [2] = "\12" } }
    game.ReplicatedStorage.BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
    dungeonActive = true
    salvarConfig()
    writefile(tempFile, "1")
    task.wait(5)
    iniciarDungeon()
end

local resetarDungeon = function()
    print("üíé Resetando dungeon com gems...")
    local args = { [1] = { [1] = { Type = "Gems", Event = "DungeonAction", Action = "BuyTicket" }, [2] = "\12" } }
    game.ReplicatedStorage.BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
    dungeonActive = false
    salvarConfig()
    safeDelete(tempFile)
end

-- ===== Voo =====
local function enableFlight()
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.Parent = hrp
    return bodyVelocity
end

local function disableFlight(bodyVelocity)
    if bodyVelocity then bodyVelocity:Destroy() end
end

local function flyToPosition(targetPosition, currentTween)
    if currentTween then currentTween:Cancel() end
    local targetCFrame = CFrame.new(targetPosition + Vector3.new(0, FLIGHT_HEIGHT, 0))
    local distance = (hrp.Position - targetPosition).Magnitude
    local duration = distance / FLIGHT_SPEED
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
    local tween = TweenService:Create(hrp, tweenInfo, {CFrame = targetCFrame})
    tween:Play()
    return tween
end

local function isPositionVisited(position, visitedPositions)
    for _, visitedPos in pairs(visitedPositions) do
        if (position - visitedPos).Magnitude < 10 then return true end
    end
    return false
end

local function addVisitedPosition(position, visitedPositions)
    table.insert(visitedPositions, position)
    if #visitedPositions > 10 then table.remove(visitedPositions, 1) end
end

local function getClosestUnvisitedMob(visitedPositions, hrp)
    local closestMob = nil
    local shortestDistance = math.huge
    local allMobs = {}
    local maxDistance = 50000
    local enemiesFolder = workspace:FindFirstChild("__Enemies")
    if not enemiesFolder then return nil end
    for _, mobFolder in pairs(enemiesFolder:GetChildren()) do
        if mobFolder:IsA("Model") then
            local mob = mobFolder:FindFirstChild("HumanoidRootPart")
            local humanoid = mobFolder:FindFirstChild("Humanoid")
            if mob and humanoid and humanoid.Health > 0 then
                local dist = (hrp.Position - mob.Position).Magnitude
                if dist <= maxDistance then
                    table.insert(allMobs, {mob = mob, distance = dist})
                end
            end
        end
    end
    for _, mobData in pairs(allMobs) do
        if not isPositionVisited(mobData.mob.Position, visitedPositions) and mobData.distance < shortestDistance then
            shortestDistance = mobData.distance
            closestMob = mobData.mob
        end
    end
    if not closestMob and #allMobs > 0 then
        visitedPositions = {}
        for _, mobData in pairs(allMobs) do
            if mobData.distance < shortestDistance then
                shortestDistance = mobData.distance
                closestMob = mobData.mob
            end
        end
    end
    return closestMob
end

-- ===== Combate =====
local teleportToNearestMob = function()
    local root = hrp
    local folder = workspace:FindFirstChild("__Enemies")
    if not folder then return false end
    local closest, bestDistance = nil, math.huge
    for _, mob in ipairs(folder:GetChildren()) do
        if mob:IsA("Model") then
            local humanoid = mob:FindFirstChild("Humanoid")
            local mobHrp = mob:FindFirstChild("HumanoidRootPart")
            if humanoid and mobHrp and humanoid.Health > 0 then
                local distance = (root.Position - mobHrp.Position).Magnitude
                if distance < bestDistance then
                    bestDistance = distance
                    closest = mobHrp
                end
            end
        end
    end
    if closest then
        root.CFrame = closest.CFrame * CFrame.new(0, 0, 5)
        print("üìç Teleportado para mob mais pr√≥ximo")
        return true
    end
    return false
end

local atacarInimigos = function()
    local folder = workspace:FindFirstChild("__Enemies")
    if not folder then return 0 end
    local attacked = 0
    for _, mob in ipairs(folder:GetChildren()) do
        if mob:IsA("Model") then
            local humanoid = mob:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                local args = { [1] = { [1] = { Event = "Attack", Enemy = mob.Name, AttackType = "All" }, [2] = "\5" } }
                game.ReplicatedStorage.BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
                attacked = attacked + 1
                task.wait(0.1)
            end
        end
    end
    return attacked
end

-- ===== SolarDungeon com Fly =====
local solarDungeon = function()
    print("üåü Iniciando combate na dungeon...")
    local waitStart = tick()
    while tick() - waitStart < 30 do
        if mobsVivos() then break end
        task.wait(2)
    end
    if not mobsVivos() then return end

    local combatStart = tick()
    local bodyVelocity = nil
    local currentTween = nil
    local visitedPositions = {}
    local currentTarget = nil
    local stuckCounter = 0

    if ativarFly then bodyVelocity = enableFlight() end

    while mobsVivos() and tick() - combatStart < 300 do
        if ativarFly then
            local mob = getClosestUnvisitedMob(visitedPositions, hrp)
            if not mob then break end
            if currentTarget and currentTarget == mob then
                stuckCounter = stuckCounter + 1
                if stuckCounter > 3 then
                    addVisitedPosition(mob.Position, visitedPositions)
                    stuckCounter = 0
                    currentTarget = nil
                    continue
                end
            else
                stuckCounter = 0
                currentTarget = mob
            end
            currentTween = flyToPosition(mob.Position, currentTween)
            local startTime = tick()
            repeat
                task.wait(0.1)
                if not mob or not mob.Parent then break end
                if (hrp.Position - mob.Position).Magnitude < 15 then break end
            until (tick() - startTime) > 10
            if currentTween then currentTween:Cancel() currentTween = nil end
            atacarInimigos()
            addVisitedPosition(mob.Position, visitedPositions)
        else
            teleportToNearestMob()
            atacarInimigos()
            task.wait(1)
        end
    end
    
    if ativarFly then disableFlight(bodyVelocity) end
end

-- ===== Loop =====
local function autoDungeonLoop()
    while ativarDungeon do
        task.wait(5)
        if not isInDungeon() and not dungeonActive then
            if ativarEvento then entrarCastelo() task.wait(5) end
            criarDungeon()
            task.wait(8)
        end
        if isInDungeon() then
            solarDungeon()
            if ativarGems then resetarDungeon() else sairCastelo() end
        end
    end
end

-- ===== GUI =====
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Window = Fluent:CreateWindow({
    Title = "Allan Hub - Arise",
    SubTitle = "Dungeon Autom√°tica",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 400),
    Acrylic = true,
    Theme = "dark",
    MinimizeKey = Enum.KeyCode.End
})
local t = Window:AddTab({ Title = "Auto Castelo", Icon = "home" })

t:AddToggle("ToggleAutoDungeon", {
    Title = "Auto Dungeon",
    Default = ativarDungeon,
    Callback = function(state) ativarDungeon = state salvarConfig() if state then task.spawn(autoDungeonLoop) end end
})
t:AddToggle("ToggleAutoFly", {
    Title = "Auto Fly to Mobs",
    Default = ativarFly,
    Callback = function(state) ativarFly = state salvarConfig() end
})

print("‚úÖ Allan Hub carregado com Fly integrado!")