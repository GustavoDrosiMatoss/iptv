local isInDungeon = function()
    -- Verificar pela UI da dungeon (mais confiável)
    local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    
    -- Procurar por elementos da UI da dungeon
    for _, gui in pairs(playerGui:GetChildren()) do
        if gui:IsA("ScreenGui") then
            -- Procurar por texto "Inimigos Restantes" ou similar
            for _, descendant in pairs(gui:GetDescendants()) do
                if descendant:IsA("TextLabel") then
                    local text = descendant.Text:lower()
                    if text:find("inimigos restantes") or text:find("enemies remaining") or 
                       text:find("tempo restante") or text:find("sala:") then
                        print("✅ Dungeon detectada pela UI:", text)
                        return true
                    end
                end
            end
        end
    end
    
    -- Verificação alternativa por workspace
    local enemies = workspace:FindFirstChild("__Enemies")
    local dungeonFolder = workspace:FindFirstChild("DungeonEnemies")
    local mobsFolder = workspace:FindFirstChild("Mobs")
    
    return enemies ~= nil or dungeonFolder ~= nil or mobsFolder ~= nil
end

local encontrarPastaMobs = function()
    -- Procurar em várias localizações possíveis
    local possibleFolders = {
        "__Enemies",
        "DungeonEnemies", 
        "Mobs",
        "Enemies",
        "NPCs",
        "Monsters"
    }
    
    for _, folderName in ipairs(possibleFolders) do
        local folder = workspace:FindFirstChild(folderName)
        if folder then
            print("📁 Pasta de mobs encontrada:", folderName)
            return folder
        end
    end
    
    -- Se não encontrar, procurar em subpastas
    for _, child in pairs(workspace:GetChildren()) do
        if child:IsA("Folder") or child:IsA("Model") then
            for _, subchild in pairs(child:GetChildren()) do
                if subchild:IsA("Model") then
                    local humanoid = subchild:FindFirstChild("Humanoid")
                    if humanoid and humanoid.Health > 0 then
                        print("📁 Mobs encontrados em:", child.Name)
                        return child
                    end
                end
            end
        end
    end
    
    print("❌ Nenhuma pasta de mobs encontrada")
    return nil
end

local mobsVivos = function()
    local folder = encontrarPastaMobs()
    if not folder then return false end
    
    local count = 0
    local mobNames = {}
    
    for _, mob in ipairs(folder:GetChildren()) do
        if mob:IsA("Model") then
            local humanoid = mob:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                count = count + 1
                table.insert(mobNames, mob.Name)
            end
        end
    end
    
    if count > 0 then
        print("🎯 Mobs vivos encontrados:", count, "->", table.concat(mobNames, ", "))
    else
        print("💀 Nenhum mob vivo encontrado")
    end
    
    return count > 0
end

-- ===== Combate melhorado =====
local teleportToNearestMob = function()
    local char = game.Players.LocalPlayer.Character
    if not char then return false end
    local root = char:FindFirstChild("HumanoidRootPart")
    if not root then return false end
    
    local folder = encontrarPastaMobs()
    if not folder then return false end

    local closest, bestDistance = nil, math.huge
    local mobName = ""
    
    for _, mob in ipairs(folder:GetChildren()) do
        if mob:IsA("Model") then
            local humanoid = mob:FindFirstChild("Humanoid")
            local hrp = mob:FindFirstChild("HumanoidRootPart") or mob:FindFirstChild("Torso") or mob:FindFirstChild("Head")
            
            if humanoid and hrp and humanoid.Health > 0 then
                local distance = (root.Position - hrp.Position).Magnitude
                if distance < bestDistance then
                    bestDistance = distance
                    closest = hrp
                    mobName = mob.Name
                end
            end
        end
    end
    
    if closest then
        root.CFrame = closest.CFrame * CFrame.new(0, 0, 5)
        print("📍 Teleportado para:", mobName, "- Distância:", math.floor(bestDistance))
        return true
    end
    return false
end

local atacarInimigos = function()
    local folder = encontrarPastaMobs()
    if not folder then return 0 end
    
    local attacked = 0
    local attackMethods = {
        -- Método 1: Event Attack
        function(mobName)
            local args = { [1] = { [1] = { Event = "Attack", Enemy = mobName, AttackType = "All" }, [2] = "\5" } }
            game.ReplicatedStorage.BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
        end,
        -- Método 2: Combat Event
        function(mobName)
            local args = { [1] = { [1] = { Event = "Combat", Target = mobName, Action = "Attack" }, [2] = "\5" } }
            game.ReplicatedStorage.BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
        end,
        -- Método 3: DungeonAttack Event
        function(mobName)
            local args = { [1] = { [1] = { Event = "DungeonAttack", Enemy = mobName }, [2] = "\5" } }
            game.ReplicatedStorage.BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
        end,
        -- Método 4: Usando ClickDetector se existir
        function(mob)
            if mob:FindFirstChildOfClass("ClickDetector") then
                fireclickdetector(mob:FindFirstChildOfClass("ClickDetector"))
                return true
            end
            return false
        end
    }
    
    for _, mob in ipairs(folder:GetChildren()) do
        if mob:IsA("Model") then
            local humanoid = mob:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                print("⚔️ Atacando:", mob.Name, "- HP:", math.floor(humanoid.Health))
                
                -- Tentar diferentes métodos de ataque
                for i, method in ipairs(attackMethods) do
                    if i <= 3 then
                        method(mob.Name)
                    else
                        method(mob)
                    end
                    task.wait(0.05)
                end
                
                attacked = attacked + 1
                task.wait(0.1)
            end
        end
    end
    
    print("⚔️ Total atacado:", attacked, "inimigos")
    return attacked
end

-- ===== Função de debug para encontrar o método correto =====
local debugDungeon = function()
    print("🔍 === DEBUG DUNGEON ===")
    print("🏰 isInDungeon():", isInDungeon())
    print("👹 mobsVivos():", mobsVivos())
    
    -- Listar todos os filhos do workspace
    print("📁 Filhos do Workspace:")
    for _, child in pairs(workspace:GetChildren()) do
        if child:IsA("Folder") or child:IsA("Model") then
            local mobCount = 0
            for _, subchild in pairs(child:GetChildren()) do
                if subchild:IsA("Model") and subchild:FindFirstChild("Humanoid") then
                    mobCount = mobCount + 1
                end
            end
            if mobCount > 0 then
                print("  📂", child.Name, "- Mobs:", mobCount)
            end
        end
    end
    
    -- Verificar PlayerGui
    print("🖥️ Elementos da UI:")
    local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    for _, gui in pairs(playerGui:GetChildren()) do
        if gui:IsA("ScreenGui") then
            for _, descendant in pairs(gui:GetDescendants()) do
                if descendant:IsA("TextLabel") then
                    local text = descendant.Text:lower()
                    if text:find("inimigos") or text:find("enemies") or text:find("restantes") or text:find("remaining") then
                        print("  🏷️", descendant.Name, ":", descendant.Text)
                    end
                end
            end
        end
    end
    print("🔍 === FIM DEBUG ===")
end

-- ===== Função principal corrigida =====
local solarDungeon = function()
    print("🌟 Iniciando combate na dungeon...")
    
    -- Debug primeiro
    debugDungeon()
    
    -- Esperar mobs aparecerem (até 30 segundos)
    local waitStart = tick()
    while tick() - waitStart < 30 do
        if mobsVivos() then
            print("✅ Mobs detectados, iniciando combate!")
            break
        end
        print("⏳ Aguardando mobs aparecerem... (" .. math.floor(30 - (tick() - waitStart)) .. "s restantes)")
        task.wait(2)
    end
    
    if not mobsVivos() then
        print("❌ Nenhum mob encontrado após 30 segundos")
        debugDungeon() -- Debug novamente se não encontrar
        return
    end

    -- Loop de combate
    local combatStart = tick()
    local lastMobCount = 0
    
    while mobsVivos() and tick() - combatStart < 300 do -- Máximo 5 minutos
        local currentMobCount = 0
        local folder = encontrarPastaMobs()
        
        if folder then
            for _, mob in pairs(folder:GetChildren()) do
                if mob:IsA("Model") then
                    local humanoid = mob:FindFirstChild("Humanoid")
                    if humanoid and humanoid.Health > 0 then
                        currentMobCount = currentMobCount + 1
                    end
                end
            end
        end
        
        print("🔄 Ciclo de combate - Mobs restantes:", currentMobCount)
        
        teleportToNearestMob()
        task.wait(0.5)
        atacarInimigos()
        
        -- Se o número de mobs não mudou por 10 segundos, algo pode estar errado
        if currentMobCount == lastMobCount then
            local stuckTime = tick() - combatStart
            if stuckTime > 10 then
                print("⚠️ Possível travamento detectado, fazendo debug...")
                debugDungeon()
            end
        else
            combatStart = tick() -- Reset timer se mobs morreram
        end
        
        lastMobCount = currentMobCount
        task.wait(1)
    end
    
    if mobsVivos() then
        print("⏰ Timeout no combate após 5 minutos")
    else
        print("🎉 Todos os mobs foram derrotados!")
    end
end

-- Adicionar botão de debug na GUI
t:AddButton({
    Title = "🔍 Debug Dungeon",
    Description = "Mostrar informações de debug",
    Callback = function()
        debugDungeon()
    end
})

t:AddButton({
    Title = "⚔️ Teste Combate Manual",
    Description = "Testar combate uma vez",
    Callback = function()
        solarDungeon()
    end
})