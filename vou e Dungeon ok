-- ==========================
-- Funções auxiliares compartilhadas
-- ==========================
local function createAndStartDungeon()
    print("[DEBUG] Criando e iniciando dungeon...")
    
    -- Criar dungeon
    local createArgs = {
        [1] = {
            [1] = {
                ["Event"] = "DungeonAction",
                ["Action"] = "Create"
            },
            [2] = "\12"
        }
    }
    pcall(function()
        game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(createArgs))
    end)
    print("✔ Dungeon criada.")
    
    task.wait(3)

    -- Iniciar dungeon
    local startArgs = {
        [1] = {
            [1] = {
                ["Event"] = "DungeonAction",
                ["Action"] = "Start"
            },
            [2] = "\12"
        }
    }
    pcall(function()
        game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(startArgs))
    end)
    print("▶ Dungeon iniciada.")
end

local function leaveDungeon()
    print("[AUTO-EXIT] Saindo da dungeon...")
    local args = {
        [1] = {
            [1] = { ["Event"] = "LeaveDungeon" },
            [2] = "\12"
        }
    }
    pcall(function()
        game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
    end)
    task.wait(2)
end

local function getDistance(pos1, pos2)
    return (pos1 - pos2).Magnitude
end

local function getClosestEnemy()
    if not workspace:FindFirstChild("__Main") or not workspace.__Main:FindFirstChild("__Enemies") then
        return nil
    end
    
    local enemiesFolder = workspace.__Main.__Enemies.Server
    local closestEnemy = nil
    local closestDistance = math.huge
    local player = game.Players.LocalPlayer
    local playerCharacter = player.Character

    if not playerCharacter or not playerCharacter:FindFirstChild("HumanoidRootPart") then 
        return nil 
    end
    local playerPosition = playerCharacter.HumanoidRootPart.Position

    for _, enemy in pairs(enemiesFolder:GetChildren()) do
        local hp = enemy:GetAttribute("HP")
        if hp and hp > 0 and enemy:FindFirstChild("HumanoidRootPart") then
            local distance = getDistance(playerPosition, enemy.HumanoidRootPart.Position)
            if distance < closestDistance then
                closestDistance = distance
                closestEnemy = enemy
            end
        end
    end

    return closestEnemy
end

local function moveToEnemy(enemy, currentTween)
    local tweenService = game:GetService("TweenService")
    local player = game.Players.LocalPlayer
    local playerCharacter = player.Character
    
    if not playerCharacter or not playerCharacter:FindFirstChild("HumanoidRootPart") or not enemy:FindFirstChild("HumanoidRootPart") then
        return false, currentTween
    end

    if currentTween then
        currentTween:Cancel()
    end

    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
    currentTween = tweenService:Create(
        playerCharacter.HumanoidRootPart, 
        tweenInfo, 
        {CFrame = enemy.HumanoidRootPart.CFrame * CFrame.new(0, 0, 5)}
    )

    currentTween:Play()

    return true, currentTween
end

local function isInCastleTime()
    local hora = os.date("*t")
    local minuto = hora.min
    return (minuto >= 15 and minuto < 30) or (minuto >= 45 and minuto < 55)
end

-- ==========================
-- SISTEMA 1: Dungeon INF (Sair após limpar)
-- ==========================
ConfigSystem.DefaultConfig.DungeonINF = ConfigSystem.DefaultConfig.DungeonINF or false
ConfigSystem.CurrentConfig.DungeonINF = ConfigSystem.CurrentConfig.DungeonINF or ConfigSystem.DefaultConfig.DungeonINF

local dungeonINFEnabled = ConfigSystem.CurrentConfig.DungeonINF
local currentTweenINF = nil
local lastEnemyCheckINF = tick()
local maxTimeWithoutEnemiesINF = 5

local function monitorDungeonINF()
    print("[DUNGEON INF] 🎯 Sistema iniciado - Farma e sai quando acaba!")
    
    while dungeonINFEnabled do
        pcall(function()
            -- 🚫 Impede conflito com Auto Farm
            if ConfigSystem.CurrentConfig.AutoFarmDungeon then
                print("[DUNGEON INF] ⚠️ CONFLITO: Auto Farm Dungeon está ativo! Use apenas um sistema.")
                task.wait(5)
                return
            end

            -- ⏰ Verificar horário do Castle
            if isInCastleTime() then
                if workspace:FindFirstChild("__Main") then
                    leaveDungeon()
                    print("[DUNGEON INF] 🏰 Saiu para o Castle Infernal!")
                end
                task.wait(60)
                return
            end

            -- 🏠 Verificar se está fora da dungeon
            if not workspace:FindFirstChild("__Main") then
                print("[DUNGEON INF] 🚪 Fora da dungeon. Criando nova...")
                createAndStartDungeon()
                task.wait(5)
                lastEnemyCheckINF = tick()
            else
                -- 👹 Procurar inimigos
                local closestEnemy = getClosestEnemy()
                local currentTime = tick()

                if closestEnemy then
                    lastEnemyCheckINF = currentTime
                    print("[DUNGEON INF] ⚔️ Atacando:", closestEnemy.Name)

                    local success
                    success, currentTweenINF = moveToEnemy(closestEnemy, currentTweenINF)
                    
                    if success then
                        -- Esperar inimigo morrer
                        local attempts = 0
                        while dungeonINFEnabled 
                              and closestEnemy.Parent 
                              and closestEnemy:GetAttribute("HP") 
                              and closestEnemy:GetAttribute("HP") > 0 
                              and attempts < 50 do
                            task.wait(0.2)
                            attempts += 1
                        end
                    end
                else
                    -- ⏱️ Sem inimigos - contar tempo
                    local timeWithoutEnemies = currentTime - lastEnemyCheckINF
                    
                    if timeWithoutEnemies >= maxTimeWithoutEnemiesINF then
                        print("[DUNGEON INF] ✅ Dungeon limpa! Saindo...")
                        leaveDungeon()
                        task.wait(15) -- Espera antes de criar nova
                    else
                        local remaining = maxTimeWithoutEnemiesINF - timeWithoutEnemies
                        print(string.format("[DUNGEON INF] 🔍 Procurando inimigos... (%.1fs restantes)", remaining))
                        task.wait(1)
                    end
                end
            end
        end)

        task.wait(0.1)
    end

    -- Cleanup
    if currentTweenINF then
        currentTweenINF:Cancel()
        currentTweenINF = nil
    end
    print("[DUNGEON INF] 🛑 Sistema desativado.")
end

-- ==========================
-- SISTEMA 2: Auto Farm Dungeon (Recriar infinito)
-- ==========================
ConfigSystem.DefaultConfig.AutoFarmDungeon = ConfigSystem.DefaultConfig.AutoFarmDungeon or false
ConfigSystem.CurrentConfig.AutoFarmDungeon = ConfigSystem.CurrentConfig.AutoFarmDungeon or ConfigSystem.DefaultConfig.AutoFarmDungeon

local autoFarmEnabled = ConfigSystem.CurrentConfig.AutoFarmDungeon
local currentTweenAuto = nil
local lastEnemyCheckAuto = tick()
local maxTimeWithoutEnemiesAuto = 5

local function monitorAutoFarm()
    print("[AUTO FARM] 🔄 Sistema iniciado - Farm infinito com recriação!")

    while autoFarmEnabled do
        pcall(function()
            -- 🚫 Impede conflito com Dungeon INF
            if ConfigSystem.CurrentConfig.DungeonINF then
                print("[AUTO FARM] ⚠️ CONFLITO: Dungeon INF está ativo! Use apenas um sistema.")
                task.wait(5)
                return
            end

            -- ⏰ Verificar horário do Castle
            if isInCastleTime() then
                if workspace:FindFirstChild("__Main") then
                    leaveDungeon()
                    print("[AUTO FARM] 🏰 Saiu para o Castle Infernal!")
                end
                task.wait(60)
                return
            end

            -- 🏠 Verificar se está fora da dungeon
            if not workspace:FindFirstChild("__Main") then
                print("[AUTO FARM] 🚪 Fora da dungeon. Criando nova...")
                createAndStartDungeon()
                task.wait(5)
                lastEnemyCheckAuto = tick()
            else
                -- 👹 Procurar inimigos
                local closestEnemy = getClosestEnemy()
                local currentTime = tick()

                if closestEnemy then
                    lastEnemyCheckAuto = currentTime
                    print("[AUTO FARM] ⚔️ Atacando:", closestEnemy.Name)

                    local success
                    success, currentTweenAuto = moveToEnemy(closestEnemy, currentTweenAuto)
                    
                    if success then
                        -- Esperar inimigo morrer
                        local attempts = 0
                        while autoFarmEnabled 
                              and closestEnemy.Parent 
                              and closestEnemy:GetAttribute("HP") 
                              and closestEnemy:GetAttribute("HP") > 0 
                              and attempts < 50 do
                            task.wait(0.2)
                            attempts += 1
                        end
                    end
                else
                    -- ⏱️ Sem inimigos - recriar dungeon
                    local timeWithoutEnemies = currentTime - lastEnemyCheckAuto
                    
                    if timeWithoutEnemies >= maxTimeWithoutEnemiesAuto then
                        print("[AUTO FARM] 🔄 Recriando dungeon...")
                        
                        -- Sair da atual
                        if currentTweenAuto then
                            currentTweenAuto:Cancel()
                            currentTweenAuto = nil
                        end
                        
                        leaveDungeon()
                        task.wait(3)
                        
                        -- Criar nova
                        createAndStartDungeon()
                        task.wait(5)
                        lastEnemyCheckAuto = tick()
                    else
                        local remaining = maxTimeWithoutEnemiesAuto - timeWithoutEnemies
                        print(string.format("[AUTO FARM] 🔍 Sem inimigos há %.1fs (recria em %.1fs)", timeWithoutEnemies, remaining))
                        task.wait(1)
                    end
                end
            end
        end)

        task.wait(0.1)
    end

    -- Cleanup
    if currentTweenAuto then
        currentTweenAuto:Cancel()
        currentTweenAuto = nil
    end
    print("[AUTO FARM] 🛑 Sistema desativado.")
end

-- ==========================
-- TOGGLES
-- ==========================

-- Toggle 1: Dungeon INF
Tabs.dungeon:AddToggle("DungeonINF", {
    Title = "🎯 Dungeon INF",
    Description = "Farma e sai quando limpa a dungeon",
    Default = ConfigSystem.CurrentConfig.DungeonINF,
    Flag = "DungeonINF",
    Callback = function(state)
        dungeonINFEnabled = state
        ConfigSystem.CurrentConfig.DungeonINF = state
        ConfigSystem.SaveConfig()

        if state then
            -- Desativar Auto Farm se estiver ativo
            if ConfigSystem.CurrentConfig.AutoFarmDungeon then
                print("⚠️ Desativando Auto Farm para evitar conflitos...")
                autoFarmEnabled = false
                ConfigSystem.CurrentConfig.AutoFarmDungeon = false
                ConfigSystem.SaveConfig()
            end
            
            task.spawn(monitorDungeonINF)
        else
            if currentTweenINF then
                currentTweenINF:Cancel()
                currentTweenINF = nil
            end
        end
    end
})

-- Toggle 2: Auto Farm Dungeon
Tabs.dungeon:AddToggle("AutoFarmDungeon", {
    Title = "🔄 Auto Farm Dungeon",
    Description = "Farm infinito com recriação automática",
    Default = ConfigSystem.CurrentConfig.AutoFarmDungeon,
    Flag = "AutoFarmDungeon",
    Callback = function(state)
        autoFarmEnabled = state
        ConfigSystem.CurrentConfig.AutoFarmDungeon = state
        ConfigSystem.SaveConfig()

        if state then
            -- Desativar Dungeon INF se estiver ativo
            if ConfigSystem.CurrentConfig.DungeonINF then
                print("⚠️ Desativando Dungeon INF para evitar conflitos...")
                dungeonINFEnabled = false
                ConfigSystem.CurrentConfig.DungeonINF = false
                ConfigSystem.SaveConfig()
            end
            
            task.spawn(monitorAutoFarm)
        else
            if currentTweenAuto then
                currentTweenAuto:Cancel()
                currentTweenAuto = nil
            end
        end
    end
})