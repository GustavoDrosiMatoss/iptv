if not game or not game.GetService then
        return
end
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local enemiesFolder = workspace:WaitForChild("__Main"):WaitForChild("__Enemies"):WaitForChild("Client")
local remote = ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")

local teleportEnabled = false
local killedNPCs = {}
local dungeonkill = {}
local selectedMobName = ""
local movementMethod = "Tween" -- Método de movimento padrão
local farmingStyle = "Default" -- Estilo de farm padrão

-- Novo sistema de armazenamento
local ConfigSystem = {}
local HttpService = game:GetService("HttpService")
ConfigSystem.Folder = "Allan Hub"
ConfigSystem.SubFolder = "AriseCrossover"
ConfigSystem.FileName = player.Name .. "_Config.json"
ConfigSystem.FilePath = ConfigSystem.Folder .. "/" .. ConfigSystem.SubFolder .. "/" .. ConfigSystem.FileName
ConfigSystem.DefaultConfig = {
    SelectedMobName = "",
    FarmSelectedMob = false,
    AutoFarmNearestNPCs = false,
    MainAutoDestroy = false,
    MainAutoArise = false,
    FarmingMethod = "Tween",
    DamageMobs = false,
    SelectedShop = "",
    SelectedWeapon = "",
    AutoBuyEnabled = false,
    AutoScanEnabled = false,
    ScanDelay = 1,
    SelectedRanks = {},
    AutoSellEnabled = false
}
ConfigSystem.CurrentConfig = {}

-- Função para criar pastas se não existirem
ConfigSystem.CreateFolders = function()
    -- Testar diferentes métodos para criar pasta em vários executores
    local success = pcall(function()
        if makefolder then
            if not isfolder(ConfigSystem.Folder) then
                makefolder(ConfigSystem.Folder)
            end
            
            if not isfolder(ConfigSystem.Folder .. "/" .. ConfigSystem.SubFolder) then
                makefolder(ConfigSystem.Folder .. "/" .. ConfigSystem.SubFolder)
            end
        end
    end)
    
    return success
end

-- Função para salvar configuração (thử nhiều phương thức)
ConfigSystem.SaveConfig = function()
    -- Garantir que a pasta existe
    ConfigSystem.CreateFolders()
    
    -- Mã hóa cấu hình thành chuỗi JSON
    local jsonData = HttpService:JSONEncode(ConfigSystem.CurrentConfig)
    
    -- Testar diferentes métodos de salvar
    local success, err = pcall(function()
        -- Método 1: writefile trực tiếp (Synapse X, KRNL, Script-Ware)
        if writefile then
            writefile(ConfigSystem.FilePath, jsonData)
            return true
        end
        
        -- Método 2: Usar SaveInstance (alguns outros executores)
        if saveinstance then
            saveinstance(ConfigSystem.FilePath, jsonData)
            return true
        end
        
        -- Método 3: Fluxus và alguns outros executores
        if fluxus and fluxus.save_file then
            fluxus.save_file(ConfigSystem.FilePath, jsonData)
            return true
        end
        
        -- Método 4: Delta và alguns outros executores
        if delta_config and delta_config.save then
            delta_config.save(ConfigSystem.FilePath, jsonData)
            return true
        end
        
        -- Método 5: Codex
        if writefile and getrenv().writefile then
            getrenv().writefile(ConfigSystem.FilePath, jsonData)
            return true
        end
        
        return false
    end)
    
    if success then
                return true
    else
                return false
    end
end

-- Função para carregar configuração (thử nhiều phương thức)
ConfigSystem.LoadConfig = function()
    -- Thử các phương thức đọc khác nhau
    local success, content = pcall(function()
        -- Método 1: readfile padrão (Synapse X, KRNL, Script-Ware)
        if readfile and isfile and isfile(ConfigSystem.FilePath) then
            return readfile(ConfigSystem.FilePath)
        end
        
        -- Método 2: Fluxus
        if fluxus and fluxus.read_file and fluxus.file_exists and fluxus.file_exists(ConfigSystem.FilePath) then
            return fluxus.read_file(ConfigSystem.FilePath)
        end
        
        -- Método 3: Delta
        if delta_config and delta_config.load and delta_config.exists and delta_config.exists(ConfigSystem.FilePath) then
            return delta_config.load(ConfigSystem.FilePath)
        end
        
        -- Método 4: Codex
        if readfile and getrenv().readfile and isfile and getrenv().isfile and getrenv().isfile(ConfigSystem.FilePath) then
            return getrenv().readfile(ConfigSystem.FilePath)
        end
        
        return nil
    end)
    
    if success and content then
        local data
        success, data = pcall(function()
            return HttpService:JSONDecode(content)
        end)
        
        if success and data then
        ConfigSystem.CurrentConfig = data
                    return true
    else
                    end
    end
    
    -- Se não conseguir ler ou ocorrer erro, criar configuração padrão
        ConfigSystem.CurrentConfig = table.clone(ConfigSystem.DefaultConfig)
        ConfigSystem.SaveConfig()
            return false
    end

-- Criar um sistema de auto save separado
local function setupAutoSave()
    spawn(function()
        while wait(5) do -- Salvar a cada 5 segundos
            pcall(function()
                ConfigSystem.SaveConfig()
            end)
        end
    end)
end

-- Carregar configuração ao iniciar
ConfigSystem.LoadConfig()
setupAutoSave() -- Iniciando salvamento automático

-- Atualizar função para salvar imediatamente ao alterar valor
local function setupSaveEvents()
    for _, tab in pairs(Tabs) do
        if tab and tab._components then
            for _, element in pairs(tab._components) do
                if element and element.OnChanged then
                    element.OnChanged:Connect(function()
                        pcall(function()
                            ConfigSystem.SaveConfig()
                        end)
                    end)
                end
            end
        end
    end
end

-- Configurar SaveManager do Fluent para compatibilidade
local playerName = game:GetService("Players").LocalPlayer.Name
if InterfaceManager then
    InterfaceManager:SetFolder("Allan Hub")
end
if SaveManager then
    SaveManager:SetFolder("Allan Hub/AriseCrossover/" .. playerName)
end

-- Detectar automaticamente novo HumanoidRootPart quando o jogador renascer
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    hrp = newCharacter:WaitForChild("HumanoidRootPart")
end)

local function anticheat()
    local player = game.Players.LocalPlayer
    if player and player.Character then
        local characterScripts = player.Character:FindFirstChild("CharacterScripts")
        
        if characterScripts then
            local flyingFixer = characterScripts:FindFirstChild("FlyingFixer")
            if flyingFixer then
                flyingFixer:Destroy()
            end

            local characterUpdater = characterScripts:FindFirstChild("CharacterUpdater")
            if characterUpdater then
                characterUpdater:Destroy()
            end
        end
    end
end

local function isEnemyDead(enemy)
    local healthBar = enemy:FindFirstChild("HealthBar")
    if healthBar and healthBar:FindFirstChild("Main") and healthBar.Main:FindFirstChild("Bar") then
        local amount = healthBar.Main.Bar:FindFirstChild("Amount")
        if amount and amount:IsA("TextLabel") and amount.ContentText == "0 HP" then
            return true
        end
    end
    return false
end

local function getNearestSelectedEnemy()
    -- Se nenhum inimigo for encontrado em 5 segundos, atualizar lista
    if not selectedEnemyFoundTime or os.time() - selectedEnemyFoundTime > 5 then
        killedNPCs = {} -- Redefinir lista de inimigos mortos
    end

    local nearestEnemy = nil
    local shortestDistance = math.huge
    local playerPosition = hrp.Position

    for _, enemy in ipairs(enemiesFolder:GetChildren()) do
        if enemy:IsA("Model") and enemy:FindFirstChild("HumanoidRootPart") then
            local healthBar = enemy:FindFirstChild("HealthBar")
            if healthBar and healthBar:FindFirstChild("Main") and healthBar.Main:FindFirstChild("Title") then
                local title = healthBar.Main.Title
                if title and title:IsA("TextLabel") and title.ContentText == selectedMobName and not killedNPCs[enemy.Name] then
                    local enemyPosition = enemy.HumanoidRootPart.Position
                    local distance = (playerPosition - enemyPosition).Magnitude
                    if distance < shortestDistance then
                        shortestDistance = distance
                        nearestEnemy = enemy
                    end
                end
            end
        end
    end

    if nearestEnemy then
        selectedEnemyFoundTime = os.time() -- Atualizar hora em que o inimigo foi encontrado
    end
    
    return nearestEnemy
end

local function getAnyEnemy()
    for _, enemy in ipairs(enemiesFolder:GetChildren()) do
        if enemy:IsA("Model") and enemy:FindFirstChild("HumanoidRootPart") and not dungeonkill[enemy.Name] then
            return enemy
        end
    end
    return nil
end

local function fireShowPetsRemote()
    local args = {
        [1] = {
            [1] = {
                ["Event"] = "ShowPets"
            },
            [2] = "\t"
        }
    }
    remote:FireServer(unpack(args))
end

local function getNearestEnemy()
    local nearestEnemy, shortestDistance = nil, math.huge
    local playerPosition = hrp.Position

    for _, enemy in ipairs(enemiesFolder:GetChildren()) do
        if enemy:IsA("Model") and enemy:FindFirstChild("HumanoidRootPart") and not killedNPCs[enemy.Name] then
            local distance = (playerPosition - enemy:GetPivot().Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                nearestEnemy = enemy
            end
        end
    end
    return nearestEnemy
end

local function moveToTarget(target)
    if not target or not target:FindFirstChild("HumanoidRootPart") then return end
    local enemyHrp = target.HumanoidRootPart

    if movementMethod == "Teleport" then
        hrp.CFrame = enemyHrp.CFrame * CFrame.new(0, 0, 6)
    elseif movementMethod == "Tween" then
        local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Linear)
        local tween = TweenService:Create(hrp, tweenInfo, {CFrame = enemyHrp.CFrame * CFrame.new(0, 0, 6)})
        tween:Play()
    elseif movementMethod == "Walk" then
        hrp.Parent:MoveTo(enemyHrp.Position)
    end
end

local function teleportAndTrackDeath()
    while teleportEnabled do
        local target = getNearestEnemy()
        if target and target.Parent then
            anticheat()
            moveToTarget(target)
            task.wait(0.5)
            fireShowPetsRemote()
            remote:FireServer({
                {
                    ["PetPos"] = {},
                    ["AttackType"] = "All",
                    ["Event"] = "Attack",
                    ["Enemy"] = target.Name
                },
                "\7"
            })

            while teleportEnabled and target.Parent and not isEnemyDead(target) do
                task.wait(0.1)
            end

            killedNPCs[target.Name] = true
        end
        task.wait(0.2)
    end
end

local function teleportDungeon()
    while teleportEnabled do
        local function getDistance(pos1, pos2)
            return (pos1 - pos2).Magnitude
        end

        local function getClosestEnemy()
            local closestEnemy = nil
            local closestDistance = math.huge
            local playerPosition = hrp.Position
            for _, enemy in pairs(enemiesFolder:GetChildren()) do
                local hp = enemy:GetAttribute("HP")
                if hp and hp > 0 and enemy:IsA("Model") and enemy:FindFirstChild("HumanoidRootPart") then
                    local distance = getDistance(playerPosition, enemy.HumanoidRootPart.Position)
                    if distance < closestDistance then
                        closestDistance = distance
                        closestEnemy = enemy
                    end
                end
            end
            return closestEnemy
        end

        local function moveToEnemy(enemy)
            if enemy and enemy:FindFirstChild("HumanoidRootPart") then
                local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Linear)
                local tween = TweenService:Create(hrp, tweenInfo, {
                    CFrame = enemy.HumanoidRootPart.CFrame * CFrame.new(0, 0, 6)
                })
                tween:Play()
                tween.Completed:Wait()
            end
        end

        local enemy = getClosestEnemy()
        if enemy then
            moveToEnemy(enemy)
            while teleportEnabled and enemy:GetAttribute("HP") and enemy:GetAttribute("HP") > 0 do
                task.wait(0.3)
            end
        else
            task.wait(1)
        end
    end
end

local function teleportToSelectedEnemy()
    local lastResetTime = os.time()
    
    while teleportEnabled do
        local target = getNearestSelectedEnemy()
        
        -- Se não encontrar alvo em 3 segundos, atualizar lista
        if not target and os.time() - lastResetTime > 3 then
            killedNPCs = {}
            lastResetTime = os.time()
                    end
        
        if target and target.Parent then
            anticheat()
            moveToTarget(target)
            task.wait(0.5)
            fireShowPetsRemote()

            remote:FireServer({
                {
                    ["PetPos"] = {},
                    ["AttackType"] = "All",
                    ["Event"] = "Attack",
                    ["Enemy"] = target.Name
                },
                "\7"
            })

            while teleportEnabled and target.Parent and not isEnemyDead(target) do
                task.wait(0.1)
            end

            killedNPCs[target.Name] = true
        end
        task.wait(0.20)
    end
end

-- Farm Method Selection Dropdown
local Fluent
local SaveManager
local InterfaceManager

local success, err = pcall(function()
    Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
    SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
    InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
end)

if not success then
        -- Thử tải từ URL dự phòng
    pcall(function()
        Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Fluent.lua"))()
        SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
        InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
    end)
end

if not Fluent then
        return
end

local Window = Fluent:CreateWindow({
    Title = "Allan Hub | Arise Crossover",
    SubTitle = "",
    TabWidth = 140,
    Size = UDim2.fromOffset(450, 350),
    Acrylic = false,
    Theme = "Luffy",
    MinimizeKey = Enum.KeyCode.LeftControl
})
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    dungeon = Window:AddTab({ Title = "Dungeon ", Icon = "" }),
    desert = Window:AddTab({ Title = "Deserto Infinito", Icon = "" }),
    tp = Window:AddTab({ Title = "Teleports", Icon = "" }),
    mount = Window:AddTab({ Title = "Mount Location/farm", Icon = "" }),
    shop = Window:AddTab({ Title = "Shop", Icon = "" }),
    Player = Window:AddTab({ Title = "Player", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
}


-- Tạo mapping giữa các map và danh sách mob tương ứng
local mobsByWorld = {
    ["SoloWorld"] = {"Soondoo", "Gonshee", "Daek", "Longin", "Anders", "Largalgan"},
    ["NarutoWorld"] = {"Snake Man", "Blossom", "Black Crow"},
    ["OPWorld"] = {"Shark Man", "Eminel", "Light Admiral"},
    ["BleachWorld"] = {"Luryu", "Fyakuya", "Genji"},
    ["BCWorld"] = {"Sortudo", "Michille", "Wind"},
    ["ChainsawWorld"] = {"Heaven", "Zere", "Ika"},
    ["JojoWorld"] = {"Diablo", "Gosuke", "Golyne"},
    ["DBWorld"] = {"Turtle", "Green", "Sky"},
    ["OPMWorld"] = {"Rider", "Cryborg", "Hurricane"}
}

local selectedWorld = "SoloWorld" -- Default world

-- Dropdown để chọn World/Map
Tabs.Main:AddDropdown("WorldDropdown", {
    Title = "Select World",
    Values = {"SoloWorld", "NarutoWorld", "OPWorld", "BleachWorld", "BCWorld", "ChainsawWorld", "JojoWorld", "DBWorld", "OPMWorld"},
    Multi = false,
    Default = selectedWorld,
    Callback = function(world)
        selectedWorld = world
        ConfigSystem.CurrentConfig.SelectedWorld = world
        
        -- Cập nhật danh sách mob dựa trên world được chọn
        local mobDropdown = Fluent.Options.WorldMobDropdown
        if mobDropdown then
            mobDropdown:SetValues(mobsByWorld[world] or {})
            -- Đặt giá trị mặc định nếu có mob
            if #mobsByWorld[world] > 0 then
                selectedMobName = mobsByWorld[world][1]
                mobDropdown:SetValue(selectedMobName)
                ConfigSystem.CurrentConfig.SelectedMobName = selectedMobName
            else
                selectedMobName = ""
            end
        end
        
        ConfigSystem.SaveConfig()
        killedNPCs = {} -- Redefinir lista de NPC mortos ao trocar de world
    end
})

-- Dropdown để chọn Mob trong world đã chọn
Tabs.Main:AddDropdown("WorldMobDropdown", {
    Title = "Select Enemy",
    Values = mobsByWorld[selectedWorld] or {},
    Multi = false,
    Default = mobsByWorld[selectedWorld] and mobsByWorld[selectedWorld][1] or "",
    Callback = function(mob)
        selectedMobName = mob
        ConfigSystem.CurrentConfig.SelectedMobName = mob
        ConfigSystem.SaveConfig()
        killedNPCs = {} -- Redefinir lista de NPC mortos ao trocar de mob
        -- Debug
    end
})

Tabs.Main:AddToggle("FarmSelectedMob", {
    Title = "Farm Selected Mob",
    Default = ConfigSystem.CurrentConfig.FarmSelectedMob or false,
    Callback = function(state)
        teleportEnabled = state
        damageEnabled = state -- Đảm bảo tính năng tấn công mobs được kích hoạt
        ConfigSystem.CurrentConfig.FarmSelectedMob = state
        ConfigSystem.SaveConfig()
        killedNPCs = {} -- Redefinir lista de NPC mortos ao iniciar farm
        if state then
            task.spawn(teleportToSelectedEnemy)
        end
    end
})

Tabs.Main:AddToggle("TeleportMobs", {
    Title = "Auto farm (nearest NPCs)",
    Default = ConfigSystem.CurrentConfig.AutoFarmNearestNPCs or false,
    Callback = function(state)
        teleportEnabled = state
        ConfigSystem.CurrentConfig.AutoFarmNearestNPCs = state
        ConfigSystem.SaveConfig()
        if state then
            task.spawn(teleportAndTrackDeath)
        end
    end
})

local Dropdown = Tabs.Main:AddDropdown("MovementMethod", {
    Title = "Farming Method",
    Values = {"Tween", "Teleport"},
    Multi = false,
    Default = ConfigSystem.CurrentConfig.FarmingMethod == "Teleport" and 2 or 1,
    Callback = function(option)
        movementMethod = option
        ConfigSystem.CurrentConfig.FarmingMethod = option
        ConfigSystem.SaveConfig()
    end 
})

Tabs.Main:AddToggle("GamepassShadowFarm", {
    Title = "Shadow farm",
    Default = false,
    Callback = function(state)
        local attackatri = game:GetService("Players").LocalPlayer.Settings
        local atri = attackatri:GetAttribute("AutoAttack")
        
        if state then
            -- Bật tính năng
            if atri == false then
                attackatri:SetAttribute("AutoAttack", true)
            end
                    else
            -- Tắt tính năng
            attackatri:SetAttribute("AutoAttack", false)
                    end
    end
})

-- Adicionar toggle de Auto Attack
local autoAttackEnabled = false
local attackCooldown = 0.5

Tabs.Main:AddToggle("AutoAttackToggle", {
    Title = "Auto Attack Mobs",
    Default = false,
    Callback = function(state)
        autoAttackEnabled = state
        
        if state then
            -- Bắt đầu vòng lặp auto attack
            task.spawn(function()
                while autoAttackEnabled do
                    local targetEnemy
                    
                    -- Kiểm tra xem Farm Selected Mob có đang bật không
                    if ConfigSystem.CurrentConfig.FarmSelectedMob and selectedMobName ~= "" then
                        -- Nếu đang farm mob đã chọn, tìm mob đó
                        targetEnemy = getNearestSelectedEnemy()
                    else
                        -- Nếu không, tìm bất kỳ mob nào gần nhất
                        targetEnemy = getNearestEnemy()
                    end
                    
                    if targetEnemy then
                        local args = {
                            [1] = {
                                [1] = {
                                    ["Event"] = "PunchAttack",
                                    ["Enemy"] = targetEnemy.Name
                                },
                                [2] = "\4"
                            }
                        }
                        remote:FireServer(unpack(args))
                    end
                    task.wait(attackCooldown) -- Chờ giữa các lần tấn công
                end
            end)
        else
            end
    end
})

local function SetSpawnAndReset(spawnName)
    local args = {
        [1] = {
            [1] = {
                ["Event"] = "ChangeSpawn",
                ["Spawn"] = spawnName
            },
            [2] = "\n"
        }
    }

    local remote = game:GetService("ReplicatedStorage"):WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")
    remote:FireServer(unpack(args))

    -- Esperar um pouco antes de renascer (tùy chọn, để đảm bảo điểm hồi sinh được thiết lập)
    task.wait(0.5)

    -- Hồi sinh nhân vật
    local player = game.Players.LocalPlayer
if player.Character and player.Character.Parent then
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.Health = 0 -- Tạo ra cái chết tự nhiên mà không xóa nhân vật đột ngột
    end
end

end

local TweenService = game:GetService("TweenService")

-- Lấy Player và HumanoidRootPart
local TweenService = game:GetService("TweenService")
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

-- Cập nhật HRP khi nhân vật hồi sinh
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    hrp = character:WaitForChild("HumanoidRootPart") -- Lấy HRP mới sau khi hồi sinh
end)

-- Hàm di chuyển (Luôn sử dụng HRP mới nhất)
local function teleportWithTween(targetCFrame)
    if hrp then
        local tweenInfo = TweenInfo.new(
            2, -- Thời gian (giây)
            Enum.EasingStyle.Sine,
            Enum.EasingDirection.Out,
            0, -- Không lặp lại
            false, -- Không đảo ngược
            0 -- Không độ trễ
        )

        local tweenGoal = {CFrame = targetCFrame}
        local tween = TweenService:Create(hrp, tweenInfo, tweenGoal)
        tween:Play()
    end
end


-- Locations List
local locations = {
    {Name = "Location 1", CFrame = CFrame.new(-6161.25781, 140.639832, 5512.9668, -0.41691944, -8.07482721e-08, 0.908943415, -2.94452178e-07, 1, -4.62235228e-08, -0.908943415, -2.86911842e-07, -0.41691944)},
    {Name = "Location 2", CFrame = CFrame.new(-5868.44141, 132.70488, 362.519379, 0.836233854, -7.47273816e-08, -0.548372984, 2.59595481e-07, 1, 2.59595481e-07, 0.548372984, -3.59437678e-07, 0.836233854)},
    {Name = "Location 3", CFrame = CFrame.new(-5430.81006, 107.441559, -5502.25244, 0.8239398, -3.60997859e-07, -0.566677332, 2.59595453e-07, 1, -2.59595396e-07, 0.566677332, 6.67841249e-08, 0.8239398)},
    {Name = "Location 4", CFrame = CFrame.new(-702.243225, 133.344467, -3538.11646, 0.978662074, 0.000114096198, -0.205476329, -0.000112703143, 1, 1.84834444e-05, 0.205476329, 5.06878177e-06, 0.978662074)},
    {Name = "Location 5", CFrame = CFrame.new(450.001709, 117.564827, 3435.4292, -0.999887109, -1.20863996e-12, 0.0150266131, -1.12492459e-12, 1, 5.57959278e-12, -0.0150266131, 5.56205906e-12, -0.999887109)},
    {Name = "Location 6", CFrame = CFrame.new(3230.96826, 135.41008, 36.1600113, -0.534268856, -4.75206689e-05, 0.845314622, -7.48304665e-05, 1, 8.92103617e-06, -0.845314622, -5.84890549e-05, -0.534268856)},
    {Name = "Location 7", CFrame = CFrame.new(4325.36523, 118.995422, -4819.78857, -0.257801384, 3.98855832e-07, -0.966197908, -5.63039578e-07, 1, 5.63040146e-07, 0.966197908, 6.89160231e-07, -0.257801384)}
    
    
}

-- Add buttons for each location
for _, loc in ipairs(locations) do
    Tabs.mount:AddButton({
        Title = loc.Name,
        Callback = function()
            teleportWithTween(loc.CFrame)
        end
    })
end


local autoDestroy = false
local autoArise = false

-- Function to Fire DestroyPrompt


local enemiesFolder = workspace:WaitForChild("__Main"):WaitForChild("__Enemies"):WaitForChild("Client")


local function fireDestroy()
    while autoDestroy do
        task.wait(0.3)  -- Delay to prevent overloading

        for _, enemy in ipairs(enemiesFolder:GetChildren()) do
            if enemy:IsA("Model") then
                local rootPart = enemy:FindFirstChild("HumanoidRootPart")
                local DestroyPrompt = rootPart and rootPart:FindFirstChild("DestroyPrompt")

                if DestroyPrompt then
                    DestroyPrompt:SetAttribute("MaxActivationDistance", 100000)
                    fireproximityprompt(DestroyPrompt)
                end
            end
        end
    end
end



-- Function to Fire ArisePrompt

local enemiesFolder = workspace:WaitForChild("__Main"):WaitForChild("__Enemies"):WaitForChild("Client")


local function fireArise()
    while autoArise do
        task.wait(0.3)  -- Delay to prevent overloading

        for _, enemy in ipairs(enemiesFolder:GetChildren()) do
            if enemy:IsA("Model") then
                local rootPart = enemy:FindFirstChild("HumanoidRootPart")
                local arisePrompt = rootPart and rootPart:FindFirstChild("ArisePrompt")

                if arisePrompt then
                    arisePrompt:SetAttribute("MaxActivationDistance", 100000)
                    fireproximityprompt(arisePrompt)
                end
            end
        end
    end
end


-- Auto Destroy Toggle
Tabs.Main:AddToggle("AutoDestroy", {
    Title = "Auto Destroy",
    Default = ConfigSystem.CurrentConfig.MainAutoDestroy or false,
    Callback = function(state)
        autoDestroy = state
        ConfigSystem.CurrentConfig.MainAutoDestroy = state
        ConfigSystem.SaveConfig()
        if state then
            task.spawn(fireDestroy)
        end
    end
})

-- Auto Arise Toggle
Tabs.Main:AddToggle("AutoArise", {
    Title = "Auto Arise",
    Default = ConfigSystem.CurrentConfig.MainAutoArise or false,
    Callback = function(state)
        autoArise = state
        ConfigSystem.CurrentConfig.MainAutoArise = state
        ConfigSystem.SaveConfig()
        if state then
            task.spawn(fireArise)
        end
    end
})

Tabs.dungeon:AddToggle("AutoDestroy", {
    Title = "Auto Destroy",
    Default = false,
    Flag = "DungeonAutoDestroy", -- Adicionar Flag para salvar configuração
    Callback = function(state)
        autoDestroy = state
        if state then
            task.spawn(fireDestroy)
        end
    end
})

-- Auto Arise Toggle
Tabs.dungeon:AddToggle("AutoArise", {
    Title = "Auto Arise",
    Default = false,
    Flag = "DungeonAutoArise", -- Adicionar Flag para salvar configuração
    Callback = function(state)
        autoArise = state
        if state then
            task.spawn(fireArise)
        end
    end
})


local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local dungeonFolder = workspace:WaitForChild("__Main"):WaitForChild("__Dungeon")

-- Variable to control teleporting
local teleportingEnabled = false
-- Função para criar a dungeon
local function createDungeon()
        local args = {
        [1] = {
            [1] = {
                ["Event"] = "DungeonAction",
                ["Action"] = "Create"
            },
            [2] = "\12"
        }
    }
    game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
        task.wait(3)

    -- Iniciar a dungeon
    local iniciarArgs = {
        [1] = {
            [1] = {
                ["Event"] = "DungeonAction",
                ["Action"] = "Start"
            },
            [2] = "\12"
        }
    }
    game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(iniciarArgs))
    end

-- Function to start the dungeon (mantida como backup)
local function startDungeon()
    local dungeonInstance = dungeonFolder:FindFirstChild("Dungeon")
    if dungeonInstance then
        local dungeonID = dungeonInstance:GetAttribute("ID")
        if dungeonID then
                        local args = {
                [1] = {
                    [1] = {
                        ["Dungeon"] = dungeonID,
                        ["Event"] = "DungeonAction",
                        ["Action"] = "Start"
                    },
                    [2] = "\n"
                }
            }
            ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
                    else
                    end
    else
            end
end

-- Function to teleport directly to an object and bypass anti-cheat
local function teleportToObject(object)
    if object and object:IsA("Part") then
        
        -- Bypass anti-cheat
        local f = player.Character and player.Character:FindFirstChild("CharacterScripts") and player.Character.CharacterScripts:FindFirstChild("FlyingFixer")
        if f then f:Destroy() else end

        local cha = player.Character and player.Character:FindFirstChild("CharacterScripts") and player.Character.CharacterScripts:FindFirstChild("CharacterUpdater")
        if cha then cha:Destroy() else end

        -- Dịch chuyển trực tiếp
        hrp.CFrame = object.CFrame
        
        task.wait(2) -- Pequeno atraso após teleporte
        createDungeon() -- Kích hoạt remote tạo dungeon usando a função corrigida
    else
            end
end

-- Function to continuously teleport to objects when enabled
local function teleportLoop()
    while teleportingEnabled do
                local foundObject = false
        for _, object in ipairs(dungeonFolder:GetChildren()) do
            if object:IsA("Part") then
                foundObject = true
                teleportToObject(object)
                task.wait(1) -- Evitar execução excessiva
            end
        end
        if not foundObject then
                    end
        task.wait(0.5) -- Atraso antes de verificar novamente
    end
end



-- Add the toggle button to start/stop teleporting
Tabs.dungeon:AddToggle("TeleportToDungeon", {
    Title = "Teleport to Dungeon",
    Default = false,
    Callback = function(state)
        teleportingEnabled = state
                if state then
            task.spawn(teleportLoop) -- Bắt đầu vòng lặp dịch chuyển khi bật
        end
    end
})


local AutoDetectToggle = Tabs.dungeon:AddToggle("AutoDetectDungeon", {Title = "Auto Detect Dungeon", Default = true})

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer

local villageSpawns = {
    ["Grass Village"] = "NarutoWorld",
    ["BRUM ISLAND"] = "OPWorld",
    ["Leveling City"] = "SoloWorld",
    ["FACEHEAL TOWN"] = "BleachWorld",
    ["Lucky"] = "BCWorld",
    ["Nipon City"] = "ChainsawWorld",
    ["Mori Town"] = "JojoWorld",
    ["Dragon City"] = "DBWorld",
    ["XZ City"] = "OPMWorld",
}

local function SetSpawnAndReset(spawnName)
    local args = {
        [1] = {
            [1] = {
                ["Event"] = "ChangeSpawn",
                ["Spawn"] = spawnName
            },
            [2] = "\n"
        }
    }

    local remote = ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")
    remote:FireServer(unpack(args))

    -- Esperar um pouco antes de renascer (tùy chọn, để đảm bảo điểm hồi sinh được thiết lập)
    task.wait(0.5)

    -- Hồi sinh nhân vật
    if player.Character then
        player.Character:BreakJoints() -- Buộc nhân vật phải hồi sinh
    end
end

local function detectDungeon()
    player.PlayerGui.Warn.ChildAdded:Connect(function(dungeon)
        if dungeon:IsA("Frame") and AutoDetectToggle.Value then
                        for _, child in ipairs(dungeon:GetChildren()) do
                if child:IsA("TextLabel") then
                    for village, spawnName in pairs(villageSpawns) do
                        if string.find(string.lower(child.Text), string.lower(village)) then
                            teleportEnabled = false
                                                        SetSpawnAndReset(spawnName)
                            return
                        end
                    end
                end
            end
        end
    end)
end

-- Đảm bảo hàm hoạt động
AutoDetectToggle:OnChanged(function(value)
    if value then
        detectDungeon()
    end
end)

detectDungeon()

local function resetAutoFarm()
    -- Đặt lại tất cả trạng thái và hàm
    killedNPCs = {} -- Đặt lại số lượng NPC đã tiêu diệt

    -- In thông báo xác nhận

    -- Khởi động lại tất cả các hàm nếu cần
end

task.spawn(function()
    while true do
        task.wait(120) -- Đợi 120 giây
        resetAutoFarm() -- Gọi hàm đặt lại
    end
end)

local VirtualUser = game:GetService("VirtualUser")
local LocalPlayer = game:GetService("Players").LocalPlayer

local antiAfkConnection

local AntiAfkToggle = Tabs.Player:AddToggle("AntiAfk", {
    Title = "Anti AFK",
    Default = false,
    Callback = function(enabled)
        if enabled then
                        -- Đảm bảo không tạo nhiều kết nối
            if not antiAfkConnection then
                antiAfkConnection = LocalPlayer.Idled:Connect(function()
                    VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                    task.wait(1) -- Thời gian chờ có thể điều chỉnh
                    VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                end)
            end
        else
                        -- Ngắt kết nối sự kiện khi tắt
            if antiAfkConnection then
                antiAfkConnection:Disconnect()
                antiAfkConnection = nil -- Đặt lại biến kết nối
            end
        end
    end
})

Tabs.Player:AddButton({
    Title = "Boost FPS",
    Description = "Lowers graphics",
    Callback = function()
        local Optimizer = {Enabled = false}

        local function DisableEffects()
            for _, v in pairs(game:GetDescendants()) do
                if v:IsA("ParticleEmitter") or v:IsA("Smoke") or v:IsA("Fire") or v:IsA("Sparkles") then
                    v.Enabled = not Optimizer.Enabled
                end
                if v:IsA("PostEffect") or v:IsA("BloomEffect") or v:IsA("BlurEffect") or v:IsA("SunRaysEffect") then
                    v.Enabled = not Optimizer.Enabled
                end
            end
        end

        local function MaximizePerformance()
            local lighting = game:GetService("Lighting")
            if Optimizer.Enabled then
                lighting.GlobalShadows = false
                lighting.FogEnd = 9e9
                lighting.Brightness = 2
                settings().Rendering.QualityLevel = 1
                settings().Physics.PhysicsEnvironmentalThrottle = 1
                settings().Rendering.MeshPartDetailLevel = Enum.MeshPartDetailLevel.Level01
                settings().Physics.AllowSleep = true
                settings().Physics.ForceCSGv2 = false
                settings().Physics.DisableCSGv2 = true
                settings().Rendering.EagerBulkExecution = true

                game:GetService("StarterGui"):SetCore("TopbarEnabled", false)

                settings().Network.IncomingReplicationLag = 0
                settings().Rendering.MaxPartCount = 100000
            else
                lighting.GlobalShadows = true
                lighting.FogEnd = 100000
                lighting.Brightness = 3
                settings().Rendering.QualityLevel = 7
                settings().Physics.PhysicsEnvironmentalThrottle = 0
                settings().Rendering.MeshPartDetailLevel = Enum.MeshPartDetailLevel.Level04
                settings().Physics.AllowSleep = false
                settings().Physics.ForceCSGv2 = true
                settings().Physics.DisableCSGv2 = false
                settings().Rendering.EagerBulkExecution = false

                game:GetService("StarterGui"):SetCore("TopbarEnabled", true)

                settings().Network.IncomingReplicationLag = 1
                settings().Rendering.MaxPartCount = 500000
            end
        end

        local function OptimizeInstances()
            for _, v in pairs(game:GetDescendants()) do
                if v:IsA("BasePart") then
                    v.CastShadow = not Optimizer.Enabled
                    v.Reflectance = Optimizer.Enabled and 0 or v.Reflectance
                    v.Material = Optimizer.Enabled and Enum.Material.SmoothPlastic or v.Material
                end
                if v:IsA("Decal") or v:IsA("Texture") then
                    v.Transparency = Optimizer.Enabled and 1 or 0
                end
                if v:IsA("MeshPart") then
                    v.RenderFidelity = Optimizer.Enabled and Enum.RenderFidelity.Performance or Enum.RenderFidelity.Precise
                end
            end

            game:GetService("Debris"):SetAutoCleanupEnabled(true)
        end

        local function CleanMemory()
            if Optimizer.Enabled then
                game:GetService("Debris"):AddItem(Instance.new("Model"), 0)
                settings().Physics.ThrottleAdjustTime = 2
                game:GetService("RunService"):Set3dRenderingEnabled(false)
            else
                game:GetService("RunService"):Set3dRenderingEnabled(true)
            end
        end

        local function ToggleOptimizer()
            Optimizer.Enabled = not Optimizer.Enabled
            DisableEffects()
            MaximizePerformance()
            OptimizeInstances()
            CleanMemory()
                    end

        game:GetService("UserInputService").InputBegan:Connect(function(input)
            if input.KeyCode == Enum.KeyCode.RightControl then
                ToggleOptimizer()
            end
        end)

        ToggleOptimizer()

        game:GetService("RunService").Heartbeat:Connect(function()
            if Optimizer.Enabled then
                CleanMemory()
            end
        end)
    end
})



local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local targetCFrame = CFrame.new(
    3648.76318, 223.552261, 2637.36719, 
    0.846323907, 7.72367986e-18, -0.532668591, 
    -1.10462046e-17, 1, -3.05065368e-18, 
    0.532668591, 8.46580728e-18, 0.846323907
)

local function tweenToPivot()
    hrp.CFrame = targetCFrame
end


local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local speedValue = 16 -- Tốc độ di chuyển mặc định
local jumpValue = 50  -- Lực nhảy mặc định
local speedEnabled = false
local jumpEnabled = false

local function updateCharacter()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        local humanoid = LocalPlayer.Character.Humanoid
        humanoid.WalkSpeed = speedEnabled and speedValue or 16
        humanoid.JumpPower = jumpEnabled and jumpValue or 50
    end
end

-- Nhập tốc độ
local SpeedInput = Tabs.Player:AddInput("SpeedInput", {
    Title = "Speed",
    Default = tostring(speedValue),
    Placeholder = "Enter speed",
    Numeric = true,
    Finished = true, 
    Callback = function(Value)
        speedValue = tonumber(Value) or 16
        updateCharacter() -- Cập nhật nhân vật ngay lập tức khi tốc độ thay đổi
    end
})

-- Nhập lực nhảy
local JumpInput = Tabs.Player:AddInput("JumpInput", {
    Title = "Jump Power",
    Default = tostring(jumpValue),
    Placeholder = "Enter jump power",
    Numeric = true,
    Finished = true, 
    Callback = function(Value)
        jumpValue = tonumber(Value) or 50
        updateCharacter() -- Cập nhật nhân vật ngay lập tức khi lực nhảy thay đổi
    end
})

-- Bật/tắt tốc độ
local SpeedToggle = Tabs.Player:AddToggle("SpeedToggle", {
    Title = "Enable Speed",
    Default = false
})

SpeedToggle:OnChanged(function(Value)
    speedEnabled = Value
    updateCharacter() -- Cập nhật nhân vật ngay lập tức khi toggle thay đổi
end)

-- Bật/tắt lực nhảy
local JumpToggle = Tabs.Player:AddToggle("JumpToggle", {
    Title = "Enable Jump Power",
    Default = false
})

JumpToggle:OnChanged(function(Value)
    jumpEnabled = Value
    updateCharacter() -- Cập nhật nhân vật ngay lập tức khi toggle thay đổi
end)

-- Cập nhật nhân vật khi hồi sinh
LocalPlayer.CharacterAdded:Connect(function()
    task.wait(1) -- Đợi nhân vật tải xong
    updateCharacter()
end)

-- Cập nhật ban đầu
updateCharacter()

local player = game.Players.LocalPlayer

local function tweenCharacter(targetCFrame)
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = player.Character.HumanoidRootPart
        local tweenService = game:GetService("TweenService")
        local tweenInfo = TweenInfo.new(3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local tween = tweenService:Create(hrp, tweenInfo, {CFrame = targetCFrame})
        tween:Play()
    end
end

-- Thêm nút
Tabs.tp:AddButton({
    Title = "Tween to Dedu island",
    Description = "Smoothly moves your character",
    Callback = function()
        tweenCharacter(CFrame.new(3859.06299, 60.1228409, 3081.9458, -0.987112403, 6.46206388e-07, -0.160028473, 5.63319077e-07, 1, 5.63319418e-07, 0.160028473, 4.65912507e-07, -0.987112403)) -- Alterar a posição conforme necessário
    end
})



local NoClipToggle = Tabs.Player:AddToggle("NoClipToggle", {
    Title = "Enable NoClip",
    Default = false
})

-- Hàm NoClip
local noclipEnabled = false
NoClipToggle:OnChanged(function(Value)
    noclipEnabled = Value
    if noclipEnabled then
        task.spawn(function()
            while noclipEnabled do
                for _, part in ipairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
                task.wait()
            end
        end)
    else
        for _, part in ipairs(game.Players.LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
    end
end)



Tabs.Player:AddButton({
    Title = "Server Hop",
    Description = "Switches to a different server",
    Callback = function()
        local PlaceID = game.PlaceId
        local AllIDs = {}
        local foundAnything = ""
        local actualHour = os.date("!*t").hour
        local File = pcall(function()
            AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
        end)
        if not File then
            table.insert(AllIDs, actualHour)
            writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
        end
        local function TPReturner()
            local Site
            if foundAnything == "" then
                Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
            else
                Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
            end
            for _, v in pairs(Site.data) do
                if tonumber(v.maxPlayers) > tonumber(v.playing) then
                    local ID = tostring(v.id)
                    local isNewServer = true
                    for _, existing in pairs(AllIDs) do
                        if ID == tostring(existing) then
                            isNewServer = false
                            break
                        end
                    end
                    if isNewServer then
                        table.insert(AllIDs, ID)
                        writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                        game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                        return
                    end
                end
            end
        end
        TPReturner()
    end
})



    

        
Tabs.dungeon:AddToggle("AutoBuyDungeonTicket", {
    Title = "Auto Buy Dungeon Ticket",
    Default = false,
    Callback = function(state)
        buyTicketEnabled = state
                
        if state then
            task.spawn(function()
                while buyTicketEnabled do
                    local args = {
                        [1] = {
                            [1] = {
                                ["Type"] = "Gems",
                                ["Event"] = "DungeonAction",
                                ["Action"] = "BuyTicket"
                            },
                            [2] = "\n"
                        }
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
                    task.wait(5) -- Đợi 5 giây trước khi gửi lại
                end
            end)
        end
    end
})



    local localPlayer = game:GetService("Players").LocalPlayer
local playerCharacter = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local playerHRP = playerCharacter:WaitForChild("HumanoidRootPart")
local enemyContainer = workspace:WaitForChild("__Main"):WaitForChild("__Enemies"):WaitForChild("Client")
local networkEvent = game:GetService("ReplicatedStorage"):WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")

local autoFarmActive = false
local defeatedEnemies = {}

local function isTargetDefeated(target)
    local healthUI = target:FindFirstChild("HealthBar")
    if healthUI and healthUI:FindFirstChild("Main") and healthUI.Main:FindFirstChild("Bar") then
        local healthText = healthUI.Main.Bar:FindFirstChild("Amount")
        if healthText and healthText:IsA("TextLabel") and healthText.ContentText == "0 HP" then
            return true
        end
    end
    return false
end

local function findClosestTarget()
    local closestJJ2, closestJJ3, closestJJ4 = nil, nil, nil
    local distJJ2, distJJ3, distJJ4 = math.huge, math.huge, math.huge
    local playerPos = localPlayer.Character and localPlayer.Character:GetPivot().Position

    if not playerPos then return nil end

    for _, enemy in ipairs(enemyContainer:GetChildren()) do
        if enemy:IsA("Model") and enemy:FindFirstChild("HumanoidRootPart") then
            local enemyType = enemy:GetAttribute("ID")
            
            -- Đảm bảo script bỏ qua các kẻ địch đã chết
            if not defeatedEnemies[enemy.Name] then
                local distance = (playerPos - enemy:GetPivot().Position).Magnitude
                
                if enemyType == "JJ2" and distance < distJJ2 then
                    distJJ2 = distance
                    closestJJ2 = enemy
                elseif enemyType == "JJ3" and distance < distJJ3 then
                    distJJ3 = distance
                    closestJJ3 = enemy
                elseif enemyType == "JJ4" and distance < distJJ4 then
                    distJJ4 = distance
                    closestJJ4 = enemy
                end
            end
        end
    end

    -- Ưu tiên: JJ2 > JJ3 > JJ4
    return closestJJ2 or closestJJ3 or closestJJ4
end

local function triggerPetVisibility()
    local arguments = {
        [1] = {
            [1] = {
                ["Event"] = "ShowPets"
            },
            [2] = "\t"
        }
    }
    game:GetService("ReplicatedStorage"):WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent"):FireServer(unpack(arguments))
end

local function startAutoFarm()
    while autoFarmActive do
        local targetEnemy = findClosestTarget()
        
        while autoFarmActive and targetEnemy do
            if not targetEnemy.Parent then break end

            local targetHRP = targetEnemy:FindFirstChild("HumanoidRootPart")
            local playerHRP = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")

            if targetHRP and playerHRP then
                -- Move to target enemy
                playerHRP.CFrame = targetHRP.CFrame * CFrame.new(0, 0, 6)

                task.wait(0.5)
                triggerPetVisibility()

                networkEvent:FireServer({
                    {
                        ["PetPos"] = {},
                        ["AttackType"] = "All",
                        ["Event"] = "Attack",
                        ["Enemy"] = targetEnemy.Name
                    },
                    "\7"
                })

                -- Wait until enemy is defeated or a higher-priority one appears
                while autoFarmActive and targetEnemy.Parent do
                    if isTargetDefeated(targetEnemy) then
                        defeatedEnemies[targetEnemy.Name] = true -- Mark it as dead immediately
                        break
                    end
                    
                    task.wait(0.1)
                    
                    -- Switch if a higher-priority target appears
                    local newTarget = findClosestTarget()
                    if newTarget and newTarget:GetAttribute("ID") == "JJ2" and newTarget ~= targetEnemy then
                        break
                    elseif newTarget and newTarget:GetAttribute("ID") == "JJ3" and targetEnemy:GetAttribute("ID") == "JJ4" then
                        break
                    end
                end
            end

            targetEnemy = findClosestTarget() -- Move to next enemy
        end

        task.wait(0.20)
    end
end

Tabs.Main:AddToggle("AutoFarmToggle", {
    Title = "auto Jeju farm",
    Default = false,
    Callback = function(state)
        autoFarmActive = state
        if state then
            task.spawn(startAutoFarm)
        end
    end
})


local AutoEnterDungeon = Tabs.dungeon:AddToggle("AutoEnterDungeon", { Title = "Auto Enter Guild Dungeon", Default = false })

local function EnterDungeon()
    while AutoEnterDungeon.Value do
        local args = {
            [1] = {
                [1] = {
                    ["Event"] = "DungeonAction",
                    ["Action"] = "TestEnter"
                },
                [2] = "\n"
            }
        }

        game:GetService("ReplicatedStorage"):WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
        task.wait(0.5) -- Ajustar o atraso se necessário
    end
end

AutoEnterDungeon:OnChanged(function(Value)
    if Value then
        task.spawn(EnterDungeon) -- Start loop when enabled
    end
end)

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Thay đổi cách lưu cấu hình để sử dụng tên người chơi
local playerName = game:GetService("Players").LocalPlayer.Name
InterfaceManager:SetFolder("Allan Hub")
SaveManager:SetFolder("Allan Hub/AriseCrossover/" .. playerName)

-- Xóa đoạn xây dựng phần cấu hình trong Settings tab
-- InterfaceManager:BuildInterfaceSection(Tabs.Settings)
-- SaveManager:BuildConfigSection(Tabs.Settings)

-- Thêm thông tin vào tab Settings
Tabs.Settings:AddParagraph({
    Title = "Cấu hình tự động",
    Content = "Cấu hình của bạn đang được tự động lưu theo tên nhân vật: " .. playerName
})

Tabs.Settings:AddParagraph({
    Title = "Phím tắt",
    Content = "Nhấn LeftControl để ẩn/hiện giao diện"
})

-- Thêm nút xóa cấu hình hiện tại
Tabs.Settings:AddButton({
    Title = "Xóa cấu hình hiện tại",
    Description = "Đặt lại tất cả cài đặt về mặc định",
    Callback = function()
        SaveManager:Delete("AutoSave_" .. playerName)
        end
})

Window:SelectTab(1)

-- Thay đổi cách tải cấu hình
local function AutoSaveConfig()
    local configName = "AutoSave_" .. playerName
    
    -- Tự động lưu cấu hình hiện tại
    task.spawn(function()
        while task.wait(5) do -- Salvar a cada 5 segundos
            pcall(function()
                SaveManager:Save(configName)
            end)
        end
    end)
    
    -- Tải cấu hình đã lưu nếu có
    pcall(function()
        SaveManager:Load(configName)
    end)
end

-- Thực thi tự động lưu/tải cấu hình
AutoSaveConfig()

-- Thêm hỗ trợ Mobile UI
repeat task.wait(0.25) until game:IsLoaded()
getgenv().Image = "rbxassetid://13099788281" -- ID tài nguyên hình ảnh đã sửa
getgenv().ToggleUI = "LeftControl" -- Phím để bật/tắt giao diện

-- Tạo giao diện mobile cho người dùng điện thoại
task.spawn(function()
    local success, errorMsg = pcall(function()
        if not getgenv().LoadedMobileUI == true then 
            getgenv().LoadedMobileUI = true
            local OpenUI = Instance.new("ScreenGui")
            local ImageButton = Instance.new("ImageButton")
            local UICorner = Instance.new("UICorner")
            
            -- Kiểm tra thiết bị
            if syn and syn.protect_gui then
                syn.protect_gui(OpenUI)
                OpenUI.Parent = game:GetService("CoreGui")
            elseif gethui then
                OpenUI.Parent = gethui()
            else
                OpenUI.Parent = game:GetService("CoreGui")
            end
            
            OpenUI.Name = "OpenUI"
            OpenUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
            
            ImageButton.Parent = OpenUI
            ImageButton.BackgroundColor3 = Color3.fromRGB(105,105,105)
            ImageButton.BackgroundTransparency = 0.8
            ImageButton.Position = UDim2.new(0.9,0,0.1,0)
            ImageButton.Size = UDim2.new(0,50,0,50)
            ImageButton.Image = getgenv().Image
            ImageButton.Draggable = true
            ImageButton.Transparency = 0.2
            
            UICorner.CornerRadius = UDim.new(0,200)
            UICorner.Parent = ImageButton
            
            ImageButton.MouseButton1Click:Connect(function()
                game:GetService("VirtualInputManager"):SendKeyEvent(true,getgenv().ToggleUI,false,game)
            end)
        end
    end)
    
    if not success then
            end
end)

-- Kiểm tra script đã tải thành công
local scriptSuccess, scriptError = pcall(function()
    end)

if not scriptSuccess then
        -- Thử cách khác để thông báo người dùng
    if game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui") then
        local screenGui = Instance.new("ScreenGui")
        screenGui.Parent = game:GetService("Players").LocalPlayer.PlayerGui
        
        local textLabel = Instance.new("TextLabel")
        textLabel.Size = UDim2.new(0.3, 0, 0.1, 0)
        textLabel.Position = UDim2.new(0.35, 0, 0.45, 0)
        textLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        textLabel.Text = "Allan Hub đã khởi động nhưng gặp lỗi. Hãy thử lại."
        textLabel.Parent = screenGui
        
        local uiCorner = Instance.new("UICorner")
        uiCorner.CornerRadius = UDim.new(0, 8)
        uiCorner.Parent = textLabel
        
        game:GetService("Debris"):AddItem(screenGui, 5)
    end
end

-- Thêm event listener để lưu ngay khi thay đổi giá trị
local function setupSaveEvents()
    for _, tab in pairs(Tabs) do
        if tab and tab._components then -- Kiểm tra tab và tab._components có tồn tại không
        for _, element in pairs(tab._components) do
                if element and element.OnChanged then -- Kiểm tra element và element.OnChanged có tồn tại không
                element.OnChanged:Connect(function()
                    pcall(function()
                        SaveManager:Save("AutoSave_" .. playerName)
                    end)
                end)
                end
            end
        end
    end
end

-- Thực thi tự động lưu/tải cấu hình
AutoSaveConfig()
setupSaveEvents() -- Thêm dòng này

local BuyWeaponSection = Tabs.shop:AddSection("Buy Weapon")
-- Mapping giữa shops và weapons
local weaponsByShop = {
    ["WeaponShop1"] = {"SpikeMace", "GemStaff", "DualKando", "CrystalScepter", "DualBoneMace", "DualSteelNaginata"},
    ["WeaponShop2"] = {"MonsterSlayer", "DualBasicStaffs", "PirateSaber", "BronzeGreatAxe", "MixedBattleAxe", "DualAncientMace"},
    ["WeaponShop3"] = {"DualPirateSaber", "DualSteelSabers", "DualSteelButterfly", "SteelSaber", "SteelButterfly", "SteelKando"},
    ["WeaponShop4"] = {"SteelNaginata", "GreatKopesh", "BoneMace", "CrimsonStaff", "AncientMace", "GreatSaber"},
    ["WeaponShop5"] = {"DualGreatSaber", "BasicStaff", "StellKopesh", "GreatTrident", "DualCrystalScepter", "DualTrident"},
    ["WeaponShop6"] = {"OzSword2", "CrystalSword2", "ObsidianDualAxe2", "SilverSpear2", "DragonAxe2", "DualDivineAxe2"},
    ["WeaponShop7"] = {"BloodStaff2", "DualCrimsonStaff2", "DualGemStaffs2", "GreatScythe2", "TwinObsidianDualStaff2", "SlayerScythe2"},
    ["WeaponShop8"] = {"BeholderStaff2", "TwinMixedAxe2", "TwinTrollSlayer2", "RuneAxe2", "DualSilverSpear2", "DualDragonAxe2"},
    ["WeaponShop9"] = {"SteelSword2", "SteelSpear2", "StarSpear2", "BoneStaff2", "SunGreatAxe2", "EnergyGreatSword2"},
}

local selectedShop = "WeaponShop1" -- Shop mặc định
local selectedWeapon = "" -- Weapon mặc định
local autoBuyEnabled = false -- Trạng thái Auto Buy

-- Cập nhật ConfigSystem để lưu các biến mới
ConfigSystem.DefaultConfig.SelectedShop = selectedShop
ConfigSystem.DefaultConfig.SelectedWeapon = selectedWeapon
ConfigSystem.DefaultConfig.AutoBuyEnabled = autoBuyEnabled

-- Dropdown để chọn Shop
Tabs.shop:AddDropdown("ShopDropdown", {
    Title = "Select Shop",
    Values = {"WeaponShop1", "WeaponShop2", "WeaponShop3", "WeaponShop4", "WeaponShop5", "WeaponShop6", "WeaponShop7", "WeaponShop8", "WeaponShop9"},
    Multi = false,
    Default = ConfigSystem.CurrentConfig.SelectedShop or selectedShop,
    Callback = function(shop)
        selectedShop = shop
        ConfigSystem.CurrentConfig.SelectedShop = shop
        
        -- Cập nhật danh sách weapon dựa trên shop được chọn
        local weaponDropdown = Fluent.Options.WeaponDropdown
        if weaponDropdown then
            weaponDropdown:SetValues(weaponsByShop[shop] or {})
            -- Đặt giá trị mặc định nếu có weapon
            if #weaponsByShop[shop] > 0 then
                selectedWeapon = weaponsByShop[shop][1]
                weaponDropdown:SetValue(selectedWeapon)
                ConfigSystem.CurrentConfig.SelectedWeapon = selectedWeapon
            else
                selectedWeapon = ""
            end
        end
        
        ConfigSystem.SaveConfig()
    end
})

-- Dropdown để chọn Weapon trong shop đã chọn
Tabs.shop:AddDropdown("WeaponDropdown", {
    Title = "Select Weapon",
    Values = weaponsByShop[selectedShop] or {},
    Multi = false,
    Default = ConfigSystem.CurrentConfig.SelectedWeapon or (weaponsByShop[selectedShop] and weaponsByShop[selectedShop][1] or ""),
    Callback = function(weapon)
        selectedWeapon = weapon
        ConfigSystem.CurrentConfig.SelectedWeapon = weapon
        ConfigSystem.SaveConfig()
        -- Debug
    end
})
-- ⏳ Đồng bộ lại danh sách vũ khí sau khi GUI đã khởi tạo
task.defer(function()
    local currentShop = ConfigSystem.CurrentConfig.SelectedShop
    local currentWeapon = ConfigSystem.CurrentConfig.SelectedWeapon
    local weaponDropdown = Fluent.Options.WeaponDropdown

    if currentShop and weaponsByShop[currentShop] and weaponDropdown then
        weaponDropdown:SetValues(weaponsByShop[currentShop])
        if table.find(weaponsByShop[currentShop], currentWeapon) then
            weaponDropdown:SetValue(currentWeapon)
        else
            local defaultWeapon = weaponsByShop[currentShop][1]
            selectedWeapon = defaultWeapon
            weaponDropdown:SetValue(defaultWeapon)
            ConfigSystem.CurrentConfig.SelectedWeapon = defaultWeapon
            ConfigSystem.SaveConfig()
        end
    end
end)


-- Hàm để mua weapon
local function buyWeapon()
    if selectedShop and selectedWeapon and selectedWeapon ~= "" then
        local args = {
            [1] = {
                [1] = {
                    ["Action"] = "Buy",
                    ["Shop"] = selectedShop,
                    ["Item"] = selectedWeapon,
                    ["Event"] = "ItemShopAction"
                },
                [2] = "\n"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
            else
            end
end

-- Toggle để bật/tắt Auto Buy
Tabs.shop:AddToggle("AutoBuyToggle", {
    Title = "Auto Buy Weapon",
    Default = ConfigSystem.CurrentConfig.AutoBuyEnabled or false,
    Callback = function(state)
        autoBuyEnabled = state
        ConfigSystem.CurrentConfig.AutoBuyEnabled = state
        ConfigSystem.SaveConfig()
        
        if state then
            task.spawn(function()
                while autoBuyEnabled do
                    buyWeapon()
                    task.wait(1) -- Chờ 1 giây giữa mỗi lần mua
                end
            end)
        end
    end
})
local UpdateWeaponSection = Tabs.shop:AddSection("Update Weapon")
-- Thêm code cho tab Update sau phần mã của tab Buy
-- Hàm để lấy danh sách tên vũ khí duy nhất từ inventory
local function getUniqueWeaponNames()
    local weapons = {}
    local seenNames = {} -- Để theo dõi tên duy nhất

    local playerWeapons = game:GetService("Players").LocalPlayer.leaderstats.Inventory.Weapons:GetChildren()
    -- GỠ LỖI

    for _, weapon in ipairs(playerWeapons) do
        local weaponName = weapon:GetAttribute("Name") -- Lấy thuộc tính "Name"
        if weaponName then
            -- GỠ LỖI
            if not seenNames[weaponName] then
                table.insert(weapons, weaponName)
                seenNames[weaponName] = true -- Đánh dấu tên đã thấy
            end
        end
    end
    return weapons
end

-- Hàm để lấy danh sách ID của tất cả vũ khí cùng loại
local function getWeaponIDs(weaponType)
    local weaponIDs = {}
    
    local playerWeapons = game:GetService("Players").LocalPlayer.leaderstats.Inventory.Weapons:GetChildren()
    for _, weapon in ipairs(playerWeapons) do
        local weaponName = weapon:GetAttribute("Name")
        -- Kiểm tra xem vũ khí có phải là loại đang tìm kiếm không
        if weaponName == weaponType then
            table.insert(weaponIDs, weapon.Name) -- Thêm ID của vũ khí vào danh sách
            -- GỠ LỖI
        end
    end
    
    return weaponIDs
end

-- Lấy danh sách tên vũ khí ban đầu
local weaponTypes = getUniqueWeaponNames()
local selectedWeaponType = weaponTypes[1] or "" -- Loại vũ khí mặc định
local autoUpdateEnabled = false -- Trạng thái Auto Update
local autoSelectedEnabled = false -- Trạng thái Auto Update cho vũ khí đã chọn

-- Cập nhật ConfigSystem
ConfigSystem.DefaultConfig.SelectedWeaponType = selectedWeaponType
ConfigSystem.DefaultConfig.AutoUpdateEnabled = autoUpdateEnabled
ConfigSystem.DefaultConfig.AutoSelectedEnabled = autoSelectedEnabled

-- Dropdown để chọn loại vũ khí muốn nâng cấp
Tabs.shop:AddDropdown("WeaponTypeDropdown", {
    Title = "Select Weapon",
    Values = weaponTypes,
    Multi = false,
    Default = ConfigSystem.CurrentConfig.SelectedWeaponType or selectedWeaponType,
    Callback = function(weaponType)
        selectedWeaponType = weaponType
        ConfigSystem.CurrentConfig.SelectedWeaponType = weaponType
        ConfigSystem.SaveConfig()
        -- GỠ LỖI
    end
})

-- Hàm để lấy tất cả vũ khí theo level
local function getWeaponsByLevel(weaponType)
    local weaponsByLevel = {}
    
    -- Khởi tạo mảng để lưu trữ vũ khí theo level
    for i = 1, 7 do
        weaponsByLevel[i] = {}
    end
    
    local playerWeapons = game:GetService("Players").LocalPlayer.leaderstats.Inventory.Weapons:GetChildren()
    for _, weapon in ipairs(playerWeapons) do
        local weaponName = weapon:GetAttribute("Name")
        local weaponLevel = weapon:GetAttribute("Level") or 1
        
        -- Nếu không chọn loại vũ khí cụ thể hoặc vũ khí thuộc loại đã chọn
        if (not weaponType or weaponType == "" or weaponName == weaponType) and weaponLevel >= 1 and weaponLevel <= 7 then
            table.insert(weaponsByLevel[weaponLevel], weapon.Name)
                    end
    end
    
    return weaponsByLevel
end

-- Hàm để nâng cấp vũ khí theo level
local function upgradeWeaponsByLevel(weaponType)
    local weaponsByLevel = getWeaponsByLevel(weaponType)
    local anyUpgraded = false
    
    -- Duyệt qua từng level, bắt đầu từ level thấp nhất
    for level = 1, 6 do
        local weapons = weaponsByLevel[level]
        
        -- Nếu có ít nhất 3 vũ khí cùng level, thực hiện nâng cấp
        while #weapons >= 3 do
            -- Lấy 3 vũ khí đầu tiên để nâng cấp
            local upgradeWeapons = {
                weapons[1],
                weapons[2],
                weapons[3]
            }
            
            -- Xóa 3 vũ khí này khỏi danh sách
            table.remove(weapons, 1)
            table.remove(weapons, 1)
            table.remove(weapons, 1)
            
            -- Thực hiện nâng cấp
            local weaponName = game:GetService("Players").LocalPlayer.leaderstats.Inventory.Weapons:FindFirstChild(upgradeWeapons[1]):GetAttribute("Name")
            
            local args = {
                [1] = {
                    [1] = {
                        ["Type"] = weaponName,
                        ["BuyType"] = "Gems",
                        ["Weapons"] = upgradeWeapons,
                        ["Event"] = "UpgradeWeapon",
                        ["Level"] = level + 1
                    },
                    [2] = "\n"
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
                        
            anyUpgraded = true
            task.wait(1) -- Đợi 1 giây để tránh spam server
        end
    end
    
    if not anyUpgraded then
        end
    
    return anyUpgraded
end

-- Nút để làm mới danh sách vũ khí
Tabs.shop:AddButton({
    Title = "Refresh Weapon List",
    Description = "Refresh the list of available weapons",
    Callback = function()
        weaponTypes = getUniqueWeaponNames()
        local weaponTypeDropdown = Fluent.Options.WeaponTypeDropdown
        if weaponTypeDropdown then
            weaponTypeDropdown:SetValues(weaponTypes)
            if #weaponTypes > 0 and not table.find(weaponTypes, selectedWeaponType) then
                selectedWeaponType = weaponTypes[1]
                weaponTypeDropdown:SetValue(selectedWeaponType)
                ConfigSystem.CurrentConfig.SelectedWeaponType = selectedWeaponType
                ConfigSystem.SaveConfig()
            end
        end
        
        end
})

-- Toggle để bật/tắt nâng cấp vũ khí đã chọn
Tabs.shop:AddToggle("AutoSelectToggle", {
    Title = "Upgrade Selected Weapon",
    Default = ConfigSystem.CurrentConfig.AutoSelectedEnabled or false,
    Callback = function(state)
        autoSelectedEnabled = state
        ConfigSystem.CurrentConfig.AutoSelectedEnabled = state
        ConfigSystem.SaveConfig()
        
        if state then
            if not selectedWeaponType or selectedWeaponType == "" then
                return
            end
            
            task.spawn(function()
                while autoSelectedEnabled do
                    local upgraded = upgradeWeaponsByLevel(selectedWeaponType)
                    if not upgraded then
                        task.wait(5) -- Đợi lâu hơn nếu không có vũ khí nào được nâng cấp
                    else
                        task.wait(1) -- Đợi ngắn hơn nếu có vũ khí được nâng cấp
                    end
                end
            end)
        end
    end
})

-- Thêm section sell pet vào tab shop
local SellPetSection = Tabs.shop:AddSection("Sell Pet")
-- Ánh xạ các rank số sang chữ cái
local rankMapping = {
    [1] = "E",
    [2] = "D",
    [3] = "C",
    [4] = "B",
    [5] = "A",
    [6] = "S",
    [7] = "SS",
    [8] = "G",
    [9] = "N"
}

-- Tạo mảng giá trị để hiển thị trong dropdown
local rankValues = {}
for i = 1, 9 do
    table.insert(rankValues, rankMapping[i] .. " (Rank " .. i .. ")")
end

-- Biến để lưu trạng thái
local selectedRanks = {}
local autoSellEnabled = false

-- Cập nhật ConfigSystem để lưu các biến mới
ConfigSystem.DefaultConfig.SelectedRanks = {}
ConfigSystem.DefaultConfig.AutoSellEnabled = false

-- Dropdown để chọn Rank
Tabs.shop:AddDropdown("RankDropdown", {
    Title = "Choose Ranks",
    Values = rankValues,
    Multi = true,
    Default = ConfigSystem.CurrentConfig.SelectedRanks or {},
    Callback = function(selections)
        selectedRanks = {}
        -- Kiểm tra xem selections có phải là table hay không
        if type(selections) == "table" then
            for selection, isSelected in pairs(selections) do
                -- Chỉ xử lý các mục đã chọn (boolean = true)
                if isSelected == true then
                    -- Trích xuất số rank từ chuỗi (vd: từ "E (Rank 1)" lấy ra 1)
                    local rankStr = selection:match("Rank (%d+)")
                    if rankStr then
                        local rank = tonumber(rankStr)
                        if rank then
                            table.insert(selectedRanks, rank)
                        end
                    end
                end
            end
        end
        ConfigSystem.CurrentConfig.SelectedRanks = selections
        ConfigSystem.SaveConfig()
            end
})

-- Hàm để bán pet theo rank
local function sellPetsByRank()
    local petFolder = player.leaderstats.Inventory:WaitForChild("Pets")
    local petsToSell = {}
    
    for _, pet in ipairs(petFolder:GetChildren()) do
        local rankVal = pet:GetAttribute("Rank")
        if typeof(rankVal) == "number" and table.find(selectedRanks, rankVal) then
            table.insert(petsToSell, pet.Name)
            
            -- Nếu đạt đủ 20 pet hoặc đây là pet cuối cùng, tiến hành bán
            if #petsToSell >= 20 then
                local args = {
                    [1] = {
                        [1] = {
                            ["Event"] = "SellPet",
                            ["Pets"] = petsToSell
                        },
                        [2] = "\t"
                    }
                }
                remote:FireServer(unpack(args))
                                
                -- Đợi một khoảng thời gian ngắn để tránh spam
                task.wait(0.3)
                
                -- Đặt lại danh sách
                petsToSell = {}
            end
        end
    end
    
    -- Bán nốt những pet còn lại (nếu có)
    if #petsToSell > 0 then
        local args = {
            [1] = {
                [1] = {
                    ["Event"] = "SellPet",
                    ["Pets"] = petsToSell
                },
                [2] = "\t"
            }
        }
        remote:FireServer(unpack(args))
            end
end

-- Nút để bán ngay
Tabs.shop:AddButton({
    Title = "Sell Now",
    Description = "Sell all pets with selected ranks immediately",
    Callback = function()
        if #selectedRanks > 0 then
            sellPetsByRank()
        else
            end
    end
})

-- Toggle để bật/tắt Auto Sell
Tabs.shop:AddToggle("AutoSellToggle", {
    Title = "Auto Sell Pets",
    Default = ConfigSystem.CurrentConfig.AutoSellEnabled or false,
    Callback = function(state)
        autoSellEnabled = state
        ConfigSystem.CurrentConfig.AutoSellEnabled = state
        ConfigSystem.SaveConfig()
        
        if state then
            if #selectedRanks > 0 then
                task.spawn(function()
                    while autoSellEnabled do
                        sellPetsByRank()
                        task.wait(5) -- Đợi 5 giây giữa mỗi lần kiểm tra và bán
                    end
                end)
            else
                end
        end
    end
})
-- ==========================
-- Funções auxiliares compartilhadas
-- ==========================
local function createDungeon()
        local args = {
        [1] = {
            [1] = {
                ["Event"] = "DungeonAction",
                ["Action"] = "Create"
            },
            [2] = "\12"
        }
    }
    game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
        task.wait(3)

    -- Iniciar a dungeon
    local iniciarArgs = {
        [1] = {
            [1] = {
                ["Event"] = "DungeonAction",
                ["Action"] = "Start"
            },
            [2] = "\12"
        }
    }
    game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(iniciarArgs))
    end

local function leaveDungeon()
        local args = {
        [1] = {
            [1] = { ["Event"] = "LeaveDungeon" },
            [2] = "\12"
        }
    }
    pcall(function()
        game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
    end)
end

local function getDistance(pos1, pos2)
    return (pos1 - pos2).Magnitude
end

local function getClosestEnemy()
    local enemiesFolder = workspace.__Main.__Enemies.Server
    local closestEnemy = nil
    local closestDistance = math.huge
    local player = game.Players.LocalPlayer
    local playerCharacter = player.Character

    if not playerCharacter or not playerCharacter:FindFirstChild("HumanoidRootPart") then 
        return nil 
    end
    local playerPosition = playerCharacter.HumanoidRootPart.Position

    for _, enemy in pairs(enemiesFolder:GetChildren()) do
        local hp = enemy:GetAttribute("HP")
        if hp and hp > 0 and enemy.Position then
            local distance = getDistance(playerPosition, enemy.Position)
            if distance < closestDistance then
                closestDistance = distance
                closestEnemy = enemy
            end
        end
    end

    return closestEnemy
end

local function moveToEnemy(enemy, currentTween)
    local tweenService = game:GetService("TweenService")
    local player = game.Players.LocalPlayer
    local playerCharacter = player.Character
    if not playerCharacter or not playerCharacter:FindFirstChild("HumanoidRootPart") or not enemy.Position then
        return false, currentTween
    end

    if currentTween then
        currentTween:Cancel()
    end

    playerCharacter.PrimaryPart = playerCharacter.HumanoidRootPart
    playerCharacter.HumanoidRootPart.Anchored = false

    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
    currentTween = tweenService:Create(playerCharacter.PrimaryPart, tweenInfo, {CFrame = enemy.CFrame})

    currentTween:Play()

    task.spawn(function()
        currentTween.Completed:Wait()
        currentTween = nil
    end)

    return true, currentTween
end

-- ==========================
-- SISTEMA 1: Auto Farm Dungeon INF
-- ==========================
ConfigSystem.DefaultConfig.AutoFarmDungeonINF = ConfigSystem.DefaultConfig.AutoFarmDungeonINF or false
ConfigSystem.CurrentConfig.AutoFarmDungeonINF = ConfigSystem.CurrentConfig.AutoFarmDungeonINF or ConfigSystem.DefaultConfig.AutoFarmDungeonINF

-- Variáveis específicas do sistema INF
local teleportINFEnabled = ConfigSystem.CurrentConfig.AutoFarmDungeonINF
local currentTweenINF = nil
local lastEnemyCheckINF = tick()
local maxTimeWithoutEnemiesINF = 5

local function monitorEnemiesINF()
    
    while teleportINFEnabled do
        pcall(function()
            -- ⏰ Checa horário do Castle Infernal
            local hora = os.date("*t")
            local minuto = hora.min

            if (minuto >= 15 and minuto < 30) or (minuto >= 45 and minuto < 55) then
                leaveDungeon()
                                task.wait(60) -- espera 1 min antes de verificar de novo
            else
                if not workspace:FindFirstChild("__Main") then
                    -- não está dentro da dungeon -> cria e inicia
                    createDungeon()
                    task.wait(5)
                else
                    local closestEnemy = getClosestEnemy()
                    local currentTime = tick()

                    if closestEnemy then
                        lastEnemyCheckINF = currentTime
                        
                        local success
                        success, currentTweenINF = moveToEnemy(closestEnemy, currentTweenINF)
                        
                        if success then
                            local attempts = 0
                            while teleportINFEnabled 
                                  and closestEnemy.Parent 
                                  and closestEnemy:GetAttribute("HP") 
                                  and closestEnemy:GetAttribute("HP") > 0 
                                  and attempts < 100 do
                                task.wait(0.1)
                                attempts += 1
                            end
                                                    end
                    else
                        local timeWithoutEnemies = currentTime - lastEnemyCheckINF
                        if timeWithoutEnemies >= maxTimeWithoutEnemiesINF then
                                                        leaveDungeon()
                            task.wait(10) -- espera 10s fora antes de tentar recriar
                        else
                            task.wait(1)
                        end
                    end
                end
            end
        end)

        task.wait(0.1)
    end

    if currentTweenINF then
        currentTweenINF:Cancel()
        currentTweenINF = nil
    end
    end

-- ==========================
-- SISTEMA 2: Auto Farm Dungeon (Recriação)
-- ==========================
ConfigSystem.DefaultConfig.AutoFarmDungeonRecreate = ConfigSystem.DefaultConfig.AutoFarmDungeonRecreate or false
ConfigSystem.CurrentConfig.AutoFarmDungeonRecreate = ConfigSystem.CurrentConfig.AutoFarmDungeonRecreate or ConfigSystem.DefaultConfig.AutoFarmDungeonRecreate

-- Variáveis específicas do sistema Recreate
local teleportRecreateEnabled = ConfigSystem.CurrentConfig.AutoFarmDungeonRecreate
local currentTweenRecreate = nil
local lastEnemyCheckRecreate = tick()
local maxTimeWithoutEnemiesRecreate = 5

local function recreateDungeon()
    
    if currentTweenRecreate then
        currentTweenRecreate:Cancel()
        currentTweenRecreate = nil
    end

    createDungeon()
    lastEnemyCheckRecreate = tick()
    task.wait(5)
end

local function monitorEnemiesRecreate()
    
    while teleportRecreateEnabled do
        pcall(function()
            -- ⏰ Checa horário
            local hora = os.date("*t")
            local minuto = hora.min

            if (minuto >= 15 and minuto < 30) or (minuto >= 45 and minuto < 55) then
                leaveDungeon()
                                task.wait(60)
            else
                if not workspace:FindFirstChild("__Main") then
                    createDungeon()
                    task.wait(5)
                end

                local closestEnemy = getClosestEnemy()
                local currentTime = tick()

                if closestEnemy then
                    lastEnemyCheckRecreate = currentTime
                    
                    local success
                    success, currentTweenRecreate = moveToEnemy(closestEnemy, currentTweenRecreate)
                    
                    if success then
                        local attempts = 0
                        while teleportRecreateEnabled 
                              and closestEnemy.Parent 
                              and closestEnemy:GetAttribute("HP") 
                              and closestEnemy:GetAttribute("HP") > 0 
                              and attempts < 100 do
                            task.wait(0.1)
                            attempts += 1
                        end
                                            end
                else
                    local timeWithoutEnemies = currentTime - lastEnemyCheckRecreate
                    if timeWithoutEnemies >= maxTimeWithoutEnemiesRecreate then
                        recreateDungeon()
                    else
                        local remainingTime = maxTimeWithoutEnemiesRecreate - timeWithoutEnemies
                        if math.floor(remainingTime) % 5 == 0 then
                                                    end
                    end
                    task.wait(1)
                end
            end
        end)

        task.wait(0.1)
    end

    if currentTweenRecreate then
        currentTweenRecreate:Cancel()
        currentTweenRecreate = nil
    end
    end

-- ==========================
-- Toggles separados
-- ==========================

-- Toggle para Dungeon INF
Tabs.dungeon:AddToggle("DungeonINF", {
    Title = "Dungeon INF",
    Default = ConfigSystem.CurrentConfig.AutoFarmDungeonINF,
    Flag = "AutoFarmDungeonINF",
    Callback = function(state)
        teleportINFEnabled = state
        ConfigSystem.CurrentConfig.AutoFarmDungeonINF = state
        ConfigSystem.SaveConfig()

        if state then
            task.spawn(monitorEnemiesINF)
        else
            if currentTweenINF then
                currentTweenINF:Cancel()
                currentTweenINF = nil
            end
                    end
    end
})

-- Toggle para Auto Farm Dungeon (com recriação)
Tabs.dungeon:AddToggle("AutoFarmDungeon", {
    Title = "Auto Farm Dungeon",
    Default = ConfigSystem.CurrentConfig.AutoFarmDungeonRecreate,
    Flag = "AutoFarmDungeonRecreate",
    Callback = function(state)
        teleportRecreateEnabled = state
        ConfigSystem.CurrentConfig.AutoFarmDungeonRecreate = state
        ConfigSystem.SaveConfig()

        if state then
            task.spawn(monitorEnemiesRecreate)
        else
            if currentTweenRecreate then
                currentTweenRecreate:Cancel()
                currentTweenRecreate = nil
            end
                    end
    end
})



-- ==========================
-- Auto Castle Sistema Modificado e Corrigido
-- ==========================

local castleEnabled = false
local castleInfEnabled = false
local castleCreateOnlyEnabled = false
local castleSessionActive = false

-- =======================
-- CONFIGS COM SALVAMENTO AUTOMÁTICO
-- =======================

-- Configuração do andar de entrada (padrão 125)
if ConfigSystem.DefaultConfig.CastleEntryFloor == nil then
    ConfigSystem.DefaultConfig.CastleEntryFloor = 125
end
if ConfigSystem.CurrentConfig.CastleEntryFloor == nil then
    ConfigSystem.CurrentConfig.CastleEntryFloor = ConfigSystem.DefaultConfig.CastleEntryFloor
end
local entryFloor = ConfigSystem.CurrentConfig.CastleEntryFloor

-- Configuração do andar de reset (padrão 200)
if ConfigSystem.DefaultConfig.CastleResetFloor == nil then
    ConfigSystem.DefaultConfig.CastleResetFloor = 200
end
if ConfigSystem.CurrentConfig.CastleResetFloor == nil then
    ConfigSystem.CurrentConfig.CastleResetFloor = ConfigSystem.DefaultConfig.CastleResetFloor
end
local resetFloor = ConfigSystem.CurrentConfig.CastleResetFloor

-- Salvamento dos toggles
if ConfigSystem.DefaultConfig.CastleInfToggle == nil then
    ConfigSystem.DefaultConfig.CastleInfToggle = false
end
if ConfigSystem.CurrentConfig.CastleInfToggle == nil then
    ConfigSystem.CurrentConfig.CastleInfToggle = ConfigSystem.DefaultConfig.CastleInfToggle
end

if ConfigSystem.DefaultConfig.CastleToggle == nil then
    ConfigSystem.DefaultConfig.CastleToggle = false
end
if ConfigSystem.CurrentConfig.CastleToggle == nil then
    ConfigSystem.CurrentConfig.CastleToggle = ConfigSystem.DefaultConfig.CastleToggle
end

if ConfigSystem.DefaultConfig.CastleCreateOnlyToggle == nil then
    ConfigSystem.DefaultConfig.CastleCreateOnlyToggle = false
end
if ConfigSystem.CurrentConfig.CastleCreateOnlyToggle == nil then
    ConfigSystem.CurrentConfig.CastleCreateOnlyToggle = ConfigSystem.DefaultConfig.CastleCreateOnlyToggle
end

-- Input para configurar andar de entrada
Tabs.dungeon:AddInput("CastleEntryFloor", {
    Title = "Castle Entry Floor",
    Default = tostring(entryFloor),
    Placeholder = "Andar de entrada (ex: 125)",
    Numeric = true,
    Finished = true,
    Callback = function(value)
        local floor = tonumber(value)
        if floor and floor > 0 then
            entryFloor = floor
            ConfigSystem.CurrentConfig.CastleEntryFloor = floor
            ConfigSystem.SaveConfig()
                    end
    end
})

-- Input para configurar andar de reset
Tabs.dungeon:AddInput("CastleResetFloor", {
    Title = "Castle Reset Detection Floor",
    Default = tostring(resetFloor),
    Placeholder = "Andar para detectar e resetar (ex: 200)",
    Numeric = true,
    Finished = true,
    Callback = function(value)
        local floor = tonumber(value)
        if floor and floor > 0 then
            resetFloor = floor
            ConfigSystem.CurrentConfig.CastleResetFloor = floor
            ConfigSystem.SaveConfig()
                    end
    end
})

-- ==========================
-- FUNÇÕES CASTLE BÁSICAS
-- ==========================

-- Detectar andar atual
local function getCurrentCastleFloor()
    local main = workspace:FindFirstChild("__Main")
    if not main then return nil end
    local world = main:FindFirstChild("__World")
    if not world then return nil end

    local current = nil
    for i = 1, 300 do
        if world:FindFirstChild("Room_" .. i) then
            current = i
        end
    end

    if current then
            else
            end
    return current
end

-- Comprar ticket com gems
local function buyCastleTicket()
        local args = {
        [1] = {
            [1] = {
                ["Type"] = "Gems",
                ["Event"] = "CastleAction",
                ["Action"] = "BuyTicket"
            },
            [2] = "\13"
        }
    }
    pcall(function() 
        game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args)) 
    end)
end

-- Entrar no castelo
local function joinCastle(floor)
    floor = floor or entryFloor
        local joinArgs = {
        [1] = {
            [1] = {
                ["Check"] = true,
                ["Floor"] = tostring(floor),
                ["Event"] = "CastleAction",
                ["Action"] = "Join"
            },
            [2] = "\13"
        }
    }
    pcall(function() 
        game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(joinArgs)) 
    end)
end

-- Função para criar o castelo
local function createCastle()
        local args = {
        [1] = {
            [1] = {
                ["Event"] = "CastleAction",
                ["Action"] = "Create"
            },
            [2] = "\13"
        }
    }
    pcall(function() 
        game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args)) 
    end)
    task.wait(3)
end

-- ==========================
-- CASTLE INF - FARM E PORTAL (CORRIGIDO)
-- ==========================

-- Função para encontrar o FirePortal
local function findFirePortal()
    local main = workspace:FindFirstChild("__Main")
    if not main then return nil, nil end
    local world = main:FindFirstChild("__World")
    if not world then return nil, nil end
    
    for i = 1, 300 do
        local room = world:FindFirstChild("Room_" .. i)
        if room then
            local portal = room:FindFirstChild("FirePortal")
            if portal then
                return portal, i
            end
        end
    end
    return nil, nil
end

-- Teleportar para o FirePortal
local function teleportToFirePortal()
    local portal, currentFloor = findFirePortal()
    if not portal then 
                return false 
    end
    
    local player = game.Players.LocalPlayer
    local char = player.Character
    if not char or not char:FindFirstChild("HumanoidRootPart") then return false end
    
    local hrp = char.HumanoidRootPart
    hrp.CFrame = portal.CFrame * CFrame.new(0, 2, -2)
    hrp.Velocity = Vector3.new(0, 0, 0)
    
        return true, currentFloor
end

-- Ativar FirePortal
local function activateFirePortal()
    local portal, currentFloor = findFirePortal()
    if not portal then return false end
    
    local prompt = portal:FindFirstChildOfClass("ProximityPrompt")
    if not prompt then
        for _, obj in ipairs(portal:GetDescendants()) do
            if obj:IsA("ProximityPrompt") then
                prompt = obj
                break
            end
        end
    end
    
    if not prompt and portal.Parent then
        prompt = portal.Parent:FindFirstChildOfClass("ProximityPrompt")
    end
    
    if prompt then
        for _ = 1, 3 do
            pcall(function()
                fireproximityprompt(prompt)
            end)
            task.wait(0.1)
        end
                return true
    end
    
    return false
end

-- Farm mobs no castle (CORRIGIDO - ESPERA O MOB MORRER)
local function farmCastleMobs()
    local mobsKilled = false
    local enemiesFolder = workspace:FindFirstChild("__Main")
    
    if enemiesFolder then
        enemiesFolder = enemiesFolder:FindFirstChild("__Enemies")
        if enemiesFolder then
            enemiesFolder = enemiesFolder:FindFirstChild("Server")
        end
    end
    
    if enemiesFolder then
        for _, mob in pairs(enemiesFolder:GetChildren()) do
            if not castleInfEnabled then break end
            
            local hp = mob:GetAttribute("HP")
            if hp and hp > 0 and mob.Position then
                local player = game.Players.LocalPlayer
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    -- Teleportar para o mob
                    player.Character.HumanoidRootPart.CFrame = mob.CFrame * CFrame.new(0, 3, 0)
                    
                    -- Atacar o mob
                    pcall(function()
                        local remote = game:GetService("ReplicatedStorage"):WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")
                        remote:FireServer({
                            {
                                ["PetPos"] = {},
                                ["AttackType"] = "All", 
                                ["Event"] = "Attack",
                                ["Enemy"] = mob.Name
                            },
                            "\7"
                        })
                    end)
                    
                    -- AGUARDAR O MOB MORRER ANTES DE IR PARA O PRÓXIMO
                                        while castleInfEnabled and mob.Parent do
                        local currentHP = mob:GetAttribute("HP")
                        if not currentHP or currentHP <= 0 then
                                                        break
                        end
                        task.wait(0.2)
                    end
                    
                    mobsKilled = true
                end
            end
        end
    end
    
    return mobsKilled
end

-- ==========================
-- CASTLE INF - LOOP PRINCIPAL
-- ==========================
local function castleInfLoop()
    task.spawn(function()
                while castleInfEnabled do
            -- Farm mobs primeiro
            local foundMobs = farmCastleMobs()
            
            -- Se não há mobs, tentar subir de andar
            if not foundMobs then
                local success = teleportToFirePortal()
                if success then
                    task.wait(1)
                    activateFirePortal()
                    task.wait(2)
                end
            end
            
            task.wait(0.5)
        end
            end)
end

-- ==========================
-- AUTO CASTLE - CRIAÇÃO, DETECÇÃO E RECRIAÇÃO
-- ==========================

local function autoCastleLoop()
    task.spawn(function()
                while castleEnabled do
            local currentFloor = getCurrentCastleFloor()

            if not currentFloor then
                -- Fora do castelo → criar, comprar ticket e entrar
                                createCastle()
                task.wait(1)
                buyCastleTicket()
                task.wait(1)
                joinCastle(entryFloor)
                task.wait(5)
            else
                -- Dentro do castelo - verifica se deve recriar
                if currentFloor >= resetFloor then
                                        
                    createCastle()
                    task.wait(1)
                    buyCastleTicket()
                    task.wait(1)
                    joinCastle(entryFloor)
                    
                    task.wait(5)
                else
                    -- Farm mobs enquanto espera
                    farmCastleMobs()
                    task.wait(1)
                end
            end

            task.wait(0.5)
        end
            end)
end

-- ==========================
-- AUTO CASTLE - APENAS CRIAR (LOOP CONTÍNUO SEM RESET)
-- ==========================

local function castleCreateOnlyLoop()
    task.spawn(function()
                while castleCreateOnlyEnabled do
            local currentFloor = getCurrentCastleFloor()

            if not currentFloor then
                -- Fora do castelo → criar, comprar ticket e entrar
                                createCastle()
                task.wait(1)
                buyCastleTicket()
                task.wait(1)
                joinCastle(entryFloor)
                task.wait(5)
                
                else
                -- Dentro do castelo - apenas aguarda (SEM RESET)
                                task.wait(2)
            end

            task.wait(0.5)
        end
            end)
end

-- ==========================
-- TOGGLES AUTOMÁTICOS COM SALVAMENTO
-- ==========================

-- Toggle Castle INF (com auto-boot)
Tabs.dungeon:AddToggle("CastleINF", {
    Title = "Castle INF (Farm + Portal)",
    Default = ConfigSystem.CurrentConfig.CastleInfToggle or false,
    Callback = function(state)
        castleInfEnabled = state
        ConfigSystem.CurrentConfig.CastleInfToggle = state
        ConfigSystem.SaveConfig()
        
        if state then
            castleInfLoop()
        else
            end
    end
})

-- Toggle Auto Castle (Criação, Detecção e Recriação) (com auto-boot)
Tabs.dungeon:AddToggle("AutoCastle", {
    Title = "Auto Castle (Create + Recreate)",
    Default = ConfigSystem.CurrentConfig.CastleToggle or false,
    Callback = function(state)
        castleEnabled = state
        ConfigSystem.CurrentConfig.CastleToggle = state
        ConfigSystem.SaveConfig()

        if state then
            createCastle()
            task.wait(1)
            buyCastleTicket()
            task.wait(1)
            joinCastle(entryFloor)
            task.wait(2)
            
            castleSessionActive = true
            autoCastleLoop()
        else
            if castleSessionActive then
                castleSessionActive = false
            end
            
            end
    end
})

-- Toggle Auto Castelo (Apenas Criar - Loop Contínuo SEM Reset)
Tabs.dungeon:AddToggle("AutoCasteloOnly", {
    Title = "Auto Castelo (Criar Apenas)",
    Description = "Cria e entra automaticamente quando fora do castelo (SEM reset)",
    Default = ConfigSystem.CurrentConfig.CastleCreateOnlyToggle or false,
    Callback = function(state)
        castleCreateOnlyEnabled = state
        ConfigSystem.CurrentConfig.CastleCreateOnlyToggle = state
        ConfigSystem.SaveConfig()
        
        if state then
            castleCreateOnlyLoop()
        else
            end
    end
})

-- 🎯 NOVA OPÇÃO: SPEED DO CASTELO INFERNAL
local selectedCastleSpeed = ConfigSystem.CurrentConfig.CastleSpeed or "1"

Tabs.dungeon:AddDropdown("CastleSpeedDropdown", {
    Title = "Speed do Castelo Infernal",
    Values = {"1", "2", "4"},
    Multi = false,
    Default = selectedCastleSpeed,
    Callback = function(speed)
        selectedCastleSpeed = speed
        ConfigSystem.CurrentConfig.CastleSpeed = speed
        ConfigSystem.SaveConfig()

        -- Aplica o código de speed diretamente
        local args = {
            [1] = {
                [1] = {
                    ["Event"] = "DungeonAction",
                    ["Action"] = "Speed",
                    ["Speed"] = tonumber(speed)
                },
                [2] = "\n"
            }
        }
        game:GetService("ReplicatedStorage"):WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
    end
})


-- ==========================
-- AUTO-BOOT: REATIVAR TOGGLES SALVOS
-- ==========================

-- Se Castle INF estava ativo, reativar
if ConfigSystem.CurrentConfig.CastleInfToggle then
    castleInfEnabled = true
    castleInfLoop()
    end

-- Se Auto Castle estava ativo, reativar
if ConfigSystem.CurrentConfig.CastleToggle then
    castleEnabled = true
    createCastle()
    task.wait(1)
    buyCastleTicket()
    task.wait(1)
    joinCastle(entryFloor)
    task.wait(2)
    castleSessionActive = true
    autoCastleLoop()
    end

-- Se Auto Castelo (criar apenas) estava ativo, reativar
if ConfigSystem.CurrentConfig.CastleCreateOnlyToggle then
    castleCreateOnlyEnabled = true
    castleCreateOnlyLoop()
    end




-- ==========================
-- Configuração inicial
-- ==========================
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local remote = ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")
local player = game.Players.LocalPlayer

-- Config defaults
if ConfigSystem.DefaultConfig.DesertInfiniteToggle == nil then
    ConfigSystem.DefaultConfig.DesertInfiniteToggle = false
end
if ConfigSystem.DefaultConfig.DesertInfiniteSpeed == nil then
    ConfigSystem.DefaultConfig.DesertInfiniteSpeed = 2
end
if ConfigSystem.DefaultConfig.DesertAutoSpeed == nil then
    ConfigSystem.DefaultConfig.DesertAutoSpeed = false
end
if ConfigSystem.DefaultConfig.DesertInfiniteTeleport == nil then
    ConfigSystem.DefaultConfig.DesertInfiniteTeleport = false
end
if ConfigSystem.DefaultConfig.DesertDungeonMode == nil then
    ConfigSystem.DefaultConfig.DesertDungeonMode = 1 -- 1 = Deserto, 2 = Castelo
end

-- Current config fallback
if ConfigSystem.CurrentConfig.DesertInfiniteToggle == nil then
    ConfigSystem.CurrentConfig.DesertInfiniteToggle = ConfigSystem.DefaultConfig.DesertInfiniteToggle
end
if ConfigSystem.CurrentConfig.DesertInfiniteSpeed == nil then
    ConfigSystem.CurrentConfig.DesertInfiniteSpeed = ConfigSystem.DefaultConfig.DesertInfiniteSpeed
end
if ConfigSystem.CurrentConfig.DesertAutoSpeed == nil then
    ConfigSystem.CurrentConfig.DesertAutoSpeed = ConfigSystem.DefaultConfig.DesertAutoSpeed
end
if ConfigSystem.CurrentConfig.DesertInfiniteTeleport == nil then
    ConfigSystem.CurrentConfig.DesertInfiniteTeleport = ConfigSystem.DefaultConfig.DesertInfiniteTeleport
end
if ConfigSystem.CurrentConfig.DesertDungeonMode == nil then
    ConfigSystem.CurrentConfig.DesertDungeonMode = ConfigSystem.DefaultConfig.DesertDungeonMode
end

-- Variables
local desertEnabled = ConfigSystem.CurrentConfig.DesertInfiniteToggle
local speedValue = ConfigSystem.CurrentConfig.DesertInfiniteSpeed
local autoSpeedEnabled = ConfigSystem.CurrentConfig.DesertAutoSpeed
local teleportEnabled = ConfigSystem.CurrentConfig.DesertInfiniteTeleport
local dungeonMode = ConfigSystem.CurrentConfig.DesertDungeonMode
local DUNGEON_ID = 5116548088
local desertSessionActive = false
local autoSpeedLoop = false

-- ==========================
-- FUNÇÕES DE DETECÇÃO
-- ==========================
local function estaNoMundoInfinito()
    local main = workspace:FindFirstChild("__Main")
    if main then
        local world = main:FindFirstChild("__World")
        if world then
            if world.Name == "InfiniteDesert" or world.Name == "DesertInfinite" then
                return true, "desert"
            end
            if world.Name == "InfiniteCastle" or world.Name == "CastleInfinite" then
                return true, "castle"
            end
        end
    end

    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local position = player.Character.HumanoidRootPart.Position
        local altitude = position.Y
        if altitude > 4000 then
            return true, "unknown"
        end
    end

    local playerGui = player:FindFirstChild("PlayerGui")
    if playerGui then
        for _, gui in pairs(playerGui:GetChildren()) do
            if gui.Name:find("Infinite") or gui.Name:find("Desert") or gui.Name:find("Castle") then
                return true, "gui"
            end
        end
    end

    return false, nil
end

local function estaNoDeserto()
    local emMundoInfinito, _ = estaNoMundoInfinito()
    return emMundoInfinito
end

-- ==========================
-- TELEPORT DINÂMICO CORRIGIDO
-- ==========================
local desertCenter = Vector3.new(474.10, 4383.76, -1875.94)
local castleCenter = Vector3.new(446.69, 4384.64, -1897.36)

local function getTeleportPosition()
    local emMundo, tipo = estaNoMundoInfinito()

    if emMundo then
        if tipo == "desert" then
            return CFrame.new(desertCenter)
        elseif tipo == "castle" then
            return CFrame.new(castleCenter)
        end
    end

    -- fallback baseado no modo configurado
    if dungeonMode == 2 then
        return CFrame.new(castleCenter)
    else
        return CFrame.new(desertCenter)
    end
end

local function manterTeleport()
    task.spawn(function()
        while teleportEnabled do
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local targetCFrame = getTeleportPosition()
                player.Character.HumanoidRootPart.CFrame = targetCFrame

                local humanoid = player.Character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid.PlatformStand = true
                    humanoid:ChangeState(Enum.HumanoidStateType.Physics)
                    player.Character.HumanoidRootPart.Velocity = Vector3.new(0,0,0)
                    player.Character.HumanoidRootPart.RotVelocity = Vector3.new(0,0,0)
                end
            end
            task.wait(0.1)
        end

        if player.Character and player.Character:FindFirstChild("Humanoid") then
            local humanoid = player.Character.Humanoid
            humanoid.PlatformStand = false
            humanoid:ChangeState(Enum.HumanoidStateType.Running)
        end
    end)
end

-- ==========================
-- VELOCIDADE
-- ==========================
local function aplicarVelocidade(valor)
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then 
        return 
    end

    local noMundo, tipo = estaNoMundoInfinito()
    if not noMundo then return end

    local speedEvent = "InfiniteModeAction"
    if tipo == "castle" or dungeonMode == 2 then
        speedEvent = "InfiniteCastleAction"
    end

    local argsSpeed = {
        [1] = {
            [1] = {
                ["Speed"] = valor,
                ["Event"] = speedEvent,
                ["Action"] = "SpeedUp"
            },
            [2] = "\13"
        }
    }

    if remote then 
        remote:FireServer(unpack(argsSpeed))
    end
end

local function iniciarAutoVelocidade()
    if autoSpeedLoop then return end
    autoSpeedLoop = true
    task.spawn(function()
        while autoSpeedEnabled and autoSpeedLoop do
            if estaNoDeserto() then
                aplicarVelocidade(speedValue)
            end
            task.wait(10)
        end
        autoSpeedLoop = false
    end)
end

local function pararAutoVelocidade()
    autoSpeedEnabled = false
    autoSpeedLoop = false
end

-- ==========================
-- SESSÃO / CONTROLE
-- ==========================
local function monitorarSaidaDeserto()
    task.spawn(function()
        local tentativasConsecutivas = 0
        local maxTentativas = 3
        while desertSessionActive do
            local emMundoInfinito, _ = estaNoMundoInfinito()
            if not emMundoInfinito then
                tentativasConsecutivas += 1
                if tentativasConsecutivas >= maxTentativas then
                    desertSessionActive = false
                    pararAutoVelocidade()
                    break
                end
            else
                tentativasConsecutivas = 0
            end
            task.wait(3)
        end
    end)
end

local function resetarEstadoSessao()
    desertSessionActive = false
    pararAutoVelocidade()
end

local function iniciarDesertoInfinito()
    if desertSessionActive then return end

    local jaEsta, _ = estaNoMundoInfinito()
    if jaEsta then
        desertSessionActive = true
        aplicarVelocidade(speedValue)
        if autoSpeedEnabled then iniciarAutoVelocidade() end
        monitorarSaidaDeserto()
        return
    end

    desertSessionActive = true
    task.spawn(function()
        local eventName = (dungeonMode == 1) and "InfiniteModeAction" or "InfiniteCastleAction"

        local argsCreate = {
            [1] = {
                [1] = {
                    ["Event"] = eventName,
                    ["Action"] = "Create"
                },
                [2] = "\13"
            }
        }
        if remote then remote:FireServer(unpack(argsCreate)) end
        task.wait(3)

        local startSuccess = false
        for tentativa = 1, 3 do
            local argsStart = {
                [1] = {
                    [1] = {
                        ["Dungeon"] = DUNGEON_ID,
                        ["Event"] = eventName,
                        ["Action"] = "Start"
                    },
                    [2] = "\13"
                }
            }
            if remote then remote:FireServer(unpack(argsStart)) end
            task.wait(4)
            local aindaNoMundo, _ = estaNoMundoInfinito()
            if aindaNoMundo then
                startSuccess = true
                break
            end
        end

        if not startSuccess then
            resetarEstadoSessao()
            return
        end

        task.wait(2)
        aplicarVelocidade(speedValue)
        if autoSpeedEnabled then iniciarAutoVelocidade() end
        monitorarSaidaDeserto()
    end)
end

-- ==========================
-- GUI
-- ==========================
Tabs.desert:AddDropdown("DesertDungeonMode", {
    Title = "Selecionar Modo",
    Values = { "Deserto Infinito", "Castelo Infinito" },
    Default = (dungeonMode == 1 and "Deserto Infinito") or "Castelo Infinito",
    Callback = function(value)
        dungeonMode = (value == "Deserto Infinito") and 1 or 2
        ConfigSystem.CurrentConfig.DesertDungeonMode = dungeonMode
        ConfigSystem.SaveConfig()
    end
})

Tabs.desert:AddToggle("DesertInfiniteToggle", {
    Title = "Ativar Deserto/Castelo Infinito",
    Default = desertEnabled,
    Callback = function(state)
        desertEnabled = state
        ConfigSystem.CurrentConfig.DesertInfiniteToggle = state
        ConfigSystem.SaveConfig()
        if state then iniciarDesertoInfinito() else resetarEstadoSessao() end
    end
})

Tabs.desert:AddInput("DesertInfiniteSpeed", {
    Title = "Velocidade",
    Default = tostring(speedValue),
    Placeholder = "Ex: 2",
    Numeric = true,
    Finished = true,
    Callback = function(value)
        local num = tonumber(value)
        if num and num > 0 then
            speedValue = num
            ConfigSystem.CurrentConfig.DesertInfiniteSpeed = num
            ConfigSystem.SaveConfig()
            aplicarVelocidade(num)
        end
    end
})

Tabs.desert:AddToggle("DesertAutoSpeed", {
    Title = "Auto Velocidade",
    Default = autoSpeedEnabled,
    Callback = function(state)
        autoSpeedEnabled = state
        ConfigSystem.CurrentConfig.DesertAutoSpeed = state
        ConfigSystem.SaveConfig()
        if state then
            if estaNoDeserto() then iniciarAutoVelocidade() end
        else
            pararAutoVelocidade()
        end
    end
})

Tabs.desert:AddToggle("DesertInfiniteTeleport", {
    Title = "Teleportar para o meio (Deserto/Castelo)",
    Default = teleportEnabled,
    Callback = function(state)
        teleportEnabled = state
        ConfigSystem.CurrentConfig.DesertInfiniteTeleport = state
        ConfigSystem.SaveConfig()
        if state then manterTeleport() end
    end
})

Tabs.desert:AddButton({
    Title = "Resetar Estado",
    Callback = function() resetarEstadoSessao() end
})

Tabs.desert:AddButton({
    Title = "Verificar Status (Debug)",
    Callback = function()
        local emMundo, tipo = estaNoMundoInfinito()
                                                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local pos = player.Character.HumanoidRootPart.Position
                    end
        local main = workspace:FindFirstChild("__Main")
        if main then
            local world = main:FindFirstChild("__World")
            if world then
                            end
        end
            end
})

-- ==========================
-- AUTO CLICK (usando atributo AutoClick) COM SALVAMENTO
-- ==========================

-- Config padrão
if ConfigSystem.DefaultConfig.AutoClick == nil then
    ConfigSystem.DefaultConfig.AutoClick = false
end

-- Config atual
if ConfigSystem.CurrentConfig.AutoClick == nil then
    ConfigSystem.CurrentConfig.AutoClick = ConfigSystem.DefaultConfig.AutoClick
end

-- Variável
local autoClickAtivo = ConfigSystem.CurrentConfig.AutoClick

local function atualizarAutoClick(state)
    autoClickAtivo = state
    ConfigSystem.CurrentConfig.AutoClick = state
    ConfigSystem.SaveConfig()
    local player = game.Players.LocalPlayer
    player:SetAttribute("AutoClick", state)
    end

-- ==========================
-- BOTÃO NA TAB MAIN
-- ==========================

Tabs.Main:AddToggle("AutoClickToggle", {
    Title = "Auto Click",
    Default = autoClickAtivo,
    Callback = function(state)
        atualizarAutoClick(state)
    end
})

-- Se estava ativo antes de reiniciar, reativa sozinho
if autoClickAtivo then
    atualizarAutoClick(true)
end
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
end)

local function teleportInstant(targetCFrame)
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if hrp then
        hrp.CFrame = targetCFrame
    end
end

-- Botões na aba tp
Tabs.tp:AddButton({
    Title = "Slayer",
    Description = "Teleportar para Slayer",
    Callback = function()
        teleportInstant(CFrame.new(-6178.12, 25.88, 1162.91))
    end
})

Tabs.tp:AddButton({
    Title = "Kaiju",
    Description = "Teleportar para Kaiju",
    Callback = function()
        teleportInstant(CFrame.new(4444.13, 20.69, 119.92))
    end
})

Tabs.tp:AddButton({
    Title = "Cursed",
    Description = "Teleportar para Cursed",
    Callback = function()
        teleportInstant(CFrame.new(561.72, 31.21, 4455.98))
    end
})

Tabs.tp:AddButton({
    Title = "Nen City",
    Description = "Teleportar para Nen City",
    Callback = function()
        teleportInstant(CFrame.new(-4781.73, 34.66, -2669.36))
    end
})

Tabs.tp:AddButton({
    Title = "Mage",
    Description = "Teleportar para Mage",
    Callback = function()
        teleportInstant(CFrame.new(-4546.13, 41.53, -7541.96))
    end
})

Tabs.tp:AddButton({
    Title = "Wall",
    Description = "Teleportar para Wall",
    Callback = function()
        teleportInstant(CFrame.new(-8374.79, 40.25, -1801.58))
    end
})

Tabs.tp:AddButton({
    Title = "Hunter",
    Description = "Teleportar para Hunter",
    Callback = function()
        teleportInstant(CFrame.new(-219.01, 24.17, -15.40))
    end
})

Tabs.tp:AddButton({
    Title = "Hurricane",
    Description = "Teleportar para Hurricane",
    Callback = function()
        teleportInstant(CFrame.new(-1290.84, 24.91, -4614.62))
    end
})

Tabs.tp:AddButton({
    Title = "Shield",
    Description = "Teleportar para Shield",
    Callback = function()
        teleportInstant(CFrame.new(2401.57, 31.00, -3764.92))
    end
})
Tabs.tp:AddButton({
    Title = "Solo City",
    Description = "Teleportar para Solo City",
    Callback = function()
        teleportInstant(CFrame.new(577.97, 28.43, 261.45))
    end
})

Tabs.tp:AddButton({
    Title = "Brum City",
    Description = "Teleportar para Brum City",
    Callback = function()
        teleportInstant(CFrame.new(-2851.11, 49.40, -2011.40))
    end
})

Tabs.tp:AddButton({
    Title = "Kidama City",
    Description = "Teleportar para Kidama City",
    Callback = function()
        teleportInstant(CFrame.new(-3345.23, 21.96, -101.47))
    end
})

Tabs.tp:AddButton({
    Title = "Dragon City",
    Description = "Teleportar para Dragon City",
    Callback = function()
        teleportInstant(CFrame.new(-2549.56, 27.20, 5857.11))
    end
})

Tabs.tp:AddButton({
    Title = "Faceheal Town",
    Description = "Teleportar para Faceheal Town",
    Callback = function()
        teleportInstant(CFrame.new(2629.01, 45.43, -2628.31))
    end
})

Tabs.tp:AddButton({
    Title = "Nipon City",
    Description = "Teleportar para Nipon City",
    Callback = function()
        teleportInstant(CFrame.new(214.68, 32.90, -4301.60))
    end
})

Tabs.tp:AddButton({
    Title = "Xz City",
    Description = "Teleportar para Xz City",
    Callback = function()
        teleportInstant(CFrame.new(3299.47, 25.39, 6342.19))
    end
})

Tabs.tp:AddButton({
    Title = "World Arena",
    Description = "Teleportar para World Arena",
    Callback = function()
        teleportInstant(CFrame.new(1650.90, 23.65, -66.51))
    end
})

Tabs.tp:AddButton({
    Title = "Lucky Kingdom",
    Description = "Teleportar para Lucky Kingdom",
    Callback = function()
        teleportInstant(CFrame.new(198.34, 38.71, 4296.11))
    end
})

Tabs.tp:AddButton({
    Title = "Mori Town",
    Description = "Teleportar para Mori Town",
    Callback = function()
        teleportInstant(CFrame.new(4816.31, 29.94, -120.23))
    end
})

Tabs.tp:AddButton({
    Title = "Grass Village",
    Description = "Teleportar para Grass Village",
    Callback = function()
        teleportInstant(CFrame.new(3986.01, 59.15, 3247.99))
    end
})

Tabs.tp:AddButton({
    Title = "Jeju Event",
    Description = "Teleportar para Jeju Event",
    Callback = function()
        teleportInstant(CFrame.new(3986.01, 59.15, 3247.99)) -- <<< substitui pela coordenada correta
    end
})
