print(Fluent)
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Criar Janela
local Window = Fluent:CreateWindow({
    Title = "Allan Hub | Arise Crossover",
    SubTitle = "100% Fluent UI",
    TabWidth = 140,
    Size = UDim2.fromOffset(460, 360),
    Acrylic = false,
    Theme = "Amethyst",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Criar Abas
local Tabs = {
    Info = Window:AddTab({ Title = "Info", Icon = "" }),
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Teleports = Window:AddTab({ Title = "Teleports", Icon = "" }),
    Dungeon = Window:AddTab({ Title = "Dungeon", Icon = "" }),
    Shop = Window:AddTab({ Title = "Shop", Icon = "" }),
    Player = Window:AddTab({ Title = "Player", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

-- Configurar Save/Interface Manager
local playerName = game:GetService("Players").LocalPlayer.Name
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
InterfaceManager:SetFolder("Allan Hub")
SaveManager:SetFolder("Allan Hub/AriseCrossover/" .. playerName)

-- Selecionar aba inicial
Window:SelectTab(1)

-- Notificação de carregamento
Fluent:Notify({
    Title = "Allan Hub",
    Content = "Interface carregada com sucesso!",
    Duration = 4
})
-- Variáveis
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local remote = ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")
local enemiesFolder = Workspace:WaitForChild("__Main"):WaitForChild("__Enemies"):WaitForChild("Client")

local teleportEnabled = false
local autoAttackEnabled = false
local selectedMobName = ""
local movementMethod = "Tween"
local attackCooldown = 0.5

-- Funções de suporte
local function isEnemyDead(enemy)
    local healthBar = enemy:FindFirstChild("HealthBar")
    if healthBar and healthBar:FindFirstChild("Main") and healthBar.Main:FindFirstChild("Bar") then
        local amount = healthBar.Main.Bar:FindFirstChild("Amount")
        if amount and amount:IsA("TextLabel") and amount.ContentText == "0 HP" then
            return true
        end
    end
    return false
end

local function getNearestEnemy()
    local nearestEnemy, shortestDistance = nil, math.huge
    for _, enemy in ipairs(enemiesFolder:GetChildren()) do
        if enemy:IsA("Model") and enemy:FindFirstChild("HumanoidRootPart") then
            local distance = (hrp.Position - enemy.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                nearestEnemy = enemy
            end
        end
    end
    return nearestEnemy
end

local function moveToTarget(enemy)
    if not enemy or not enemy:FindFirstChild("HumanoidRootPart") then return end
    local enemyHrp = enemy.HumanoidRootPart

    if movementMethod == "Teleport" then
        hrp.CFrame = enemyHrp.CFrame * CFrame.new(0, 0, 6)
    elseif movementMethod == "Tween" then
        local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Linear)
        TweenService:Create(hrp, tweenInfo, {CFrame = enemyHrp.CFrame * CFrame.new(0, 0, 6)}):Play()
    end
end

local function farmNearestEnemies()
    while teleportEnabled do
        local target = getNearestEnemy()
        if target then
            moveToTarget(target)
            task.wait(0.5)
            remote:FireServer({
                {
                    ["PetPos"] = {},
                    ["AttackType"] = "All",
                    ["Event"] = "Attack",
                    ["Enemy"] = target.Name
                },
                "\7"
            })
            while teleportEnabled and target.Parent and not isEnemyDead(target) do
                task.wait(0.1)
            end
        end
        task.wait(0.2)
    end
end

-- GUI Fluent - Aba Main
Tabs.Main:AddToggle("FarmNearest", {
    Title = "Auto Farm (Nearest NPCs)",
    Default = false,
    Callback = function(state)
        teleportEnabled = state
        if state then
            task.spawn(farmNearestEnemies)
        end
    end
})

Tabs.Main:AddDropdown("MovementMethod", {
    Title = "Farming Method",
    Values = {"Tween", "Teleport"},
    Default = "Tween",
    Callback = function(option)
        movementMethod = option
    end
})

Tabs.Main:AddToggle("AutoAttack", {
    Title = "Auto Attack",
    Default = false,
    Callback = function(state)
        autoAttackEnabled = state
        if state then
            task.spawn(function()
                while autoAttackEnabled do
                    local target = getNearestEnemy()
                    if target then
                        remote:FireServer({
                            {
                                ["Event"] = "PunchAttack",
                                ["Enemy"] = target.Name
                            },
                            "\4"
                        })
                    end
                    task.wait(attackCooldown)
                end
            end)
        end
    end
})
-- Função para setar spawn e resetar personagem
local function SetSpawnAndReset(spawnName)
    local args = {
        [1] = {
            [1] = {
                ["Event"] = "ChangeSpawn",
                ["Spawn"] = spawnName
            },
            [2] = "\n"
        }
    }
    remote:FireServer(unpack(args))
    task.wait(0.5)
    if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
        player.Character:FindFirstChildOfClass("Humanoid").Health = 0
    end
end

-- Botões de Teleporte para Spawns
Tabs.Teleports:AddButton({
    Title = "Leveling City",
    Callback = function() SetSpawnAndReset("SoloWorld") end
})

Tabs.Teleports:AddButton({
    Title = "Grass Village",
    Callback = function() SetSpawnAndReset("NarutoWorld") end
})

Tabs.Teleports:AddButton({
    Title = "Brum Island",
    Callback = function() SetSpawnAndReset("OPWorld") end
})

Tabs.Teleports:AddButton({
    Title = "Faceheal Town",
    Callback = function() SetSpawnAndReset("BleachWorld") end
})

Tabs.Teleports:AddButton({
    Title = "Lucky Kingdom",
    Callback = function() SetSpawnAndReset("BCWorld") end
})

Tabs.Teleports:AddButton({
    Title = "Nipon City",
    Callback = function() SetSpawnAndReset("ChainsawWorld") end
})

Tabs.Teleports:AddButton({
    Title = "Mori Town",
    Callback = function() SetSpawnAndReset("JojoWorld") end
})

Tabs.Teleports:AddButton({
    Title = "Dragon City",
    Callback = function() SetSpawnAndReset("DBWorld") end
})

Tabs.Teleports:AddButton({
    Title = "XZ City",
    Callback = function() SetSpawnAndReset("OPMWorld") end
})

-- Teleporte suave para posições específicas (exemplo de mounts)
local function teleportWithTween(targetCFrame)
    if hrp then
        local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
        local tweenGoal = {CFrame = targetCFrame}
        local tween = TweenService:Create(hrp, tweenInfo, tweenGoal)
        tween:Play()
    end
end

-- Locais fixos
local locations = {
    {Name = "Mount 1", CFrame = CFrame.new(-6161, 140, 5512)},
    {Name = "Mount 2", CFrame = CFrame.new(-5868, 132, 362)},
    {Name = "Mount 3", CFrame = CFrame.new(-5430, 107, -5502)},
    {Name = "Mount 4", CFrame = CFrame.new(-702, 133, -3538)},
    {Name = "Mount 5", CFrame = CFrame.new(450, 117, 3435)},
    {Name = "Mount 6", CFrame = CFrame.new(3230, 135, 36)},
    {Name = "Mount 7", CFrame = CFrame.new(4325, 118, -4819)},
}

for _, loc in ipairs(locations) do
    Tabs.Teleports:AddButton({
        Title = loc.Name,
        Callback = function() teleportWithTween(loc.CFrame) end
    })
end
-- Variáveis para Dungeon
local dungeonFolder = workspace:WaitForChild("__Main"):WaitForChild("__Dungeon")
local autoDestroy = false
local autoArise = false
local teleportingEnabled = false
local buyTicketEnabled = false

-- Criar Dungeon
local function createDungeon()
    local args = {
        [1] = {
            [1] = { ["Event"] = "DungeonAction", ["Action"] = "Create" },
            [2] = "\12"
        }
    }
    remote:FireServer(unpack(args))
    task.wait(3)
    -- Iniciar depois de criar
    local iniciarArgs = {
        [1] = {
            [1] = { ["Event"] = "DungeonAction", ["Action"] = "Start" },
            [2] = "\12"
        }
    }
    remote:FireServer(unpack(iniciarArgs))
end

-- Teleportar até objeto da Dungeon
local function teleportToObject(object)
    if object and object:IsA("Part") then
        hrp.CFrame = object.CFrame
        task.wait(2)
        createDungeon()
    end
end

-- Loop teleport até dungeon
local function teleportLoop()
    while teleportingEnabled do
        for _, object in ipairs(dungeonFolder:GetChildren()) do
            if object:IsA("Part") then
                teleportToObject(object)
                task.wait(1)
            end
        end
        task.wait(0.5)
    end
end

-- Toggles Fluent
Tabs.Dungeon:AddToggle("AutoDestroyDungeon", {
    Title = "Auto Destroy",
    Default = false,
    Callback = function(state)
        autoDestroy = state
        if state then
            task.spawn(function()
                while autoDestroy do
                    task.wait(0.3)
                    for _, enemy in ipairs(enemiesFolder:GetChildren()) do
                        if enemy:IsA("Model") then
                            local rootPart = enemy:FindFirstChild("HumanoidRootPart")
                            local prompt = rootPart and rootPart:FindFirstChild("DestroyPrompt")
                            if prompt then
                                prompt:SetAttribute("MaxActivationDistance", 100000)
                                fireproximityprompt(prompt)
                            end
                        end
                    end
                end
            end)
        end
    end
})

Tabs.Dungeon:AddToggle("AutoAriseDungeon", {
    Title = "Auto Arise",
    Default = false,
    Callback = function(state)
        autoArise = state
        if state then
            task.spawn(function()
                while autoArise do
                    task.wait(0.3)
                    for _, enemy in ipairs(enemiesFolder:GetChildren()) do
                        if enemy:IsA("Model") then
                            local rootPart = enemy:FindFirstChild("HumanoidRootPart")
                            local arisePrompt = rootPart and rootPart:FindFirstChild("ArisePrompt")
                            if arisePrompt then
                                arisePrompt:SetAttribute("MaxActivationDistance", 100000)
                                fireproximityprompt(arisePrompt)
                            end
                        end
                    end
                end
            end)
        end
    end
})

Tabs.Dungeon:AddToggle("TeleportToDungeon", {
    Title = "Teleport to Dungeon",
    Default = false,
    Callback = function(state)
        teleportingEnabled = state
        if state then
            task.spawn(teleportLoop)
        end
    end
})

Tabs.Dungeon:AddToggle("AutoBuyDungeonTicket", {
    Title = "Auto Buy Dungeon Ticket",
    Default = false,
    Callback = function(state)
        buyTicketEnabled = state
        if state then
            task.spawn(function()
                while buyTicketEnabled do
                    local args = {
                        [1] = {
                            [1] = { ["Type"] = "Gems", ["Event"] = "DungeonAction", ["Action"] = "BuyTicket" },
                            [2] = "\n"
                        }
                    }
                    remote:FireServer(unpack(args))
                    task.wait(5)
                end
            end)
        end
    end
})

Tabs.Dungeon:AddToggle("AutoEnterGuildDungeon", {
    Title = "Auto Enter Guild Dungeon",
    Default = false,
    Callback = function(state)
        if state then
            task.spawn(function()
                while state do
                    local args = {
                        [1] = {
                            [1] = { ["Event"] = "DungeonAction", ["Action"] = "TestEnter" },
                            [2] = "\n"
                        }
                    }
                    remote:FireServer(unpack(args))
                    task.wait(0.5)
                end
            end)
        end
    end
})
-- Shop System
local selectedShop = "WeaponShop1"
local selectedWeapon = ""
local autoBuyEnabled = false

-- Lista de armas por loja
local weaponsByShop = {
    ["WeaponShop1"] = {"SpikeMace", "GemStaff", "DualKando"},
    ["WeaponShop2"] = {"MonsterSlayer", "DualBasicStaffs", "PirateSaber"},
    ["WeaponShop3"] = {"DualPirateSaber", "SteelSaber", "SteelButterfly"},
    ["WeaponShop4"] = {"SteelNaginata", "GreatKopesh", "BoneMace"},
    ["WeaponShop5"] = {"DualGreatSaber", "BasicStaff", "GreatTrident"},
    ["WeaponShop6"] = {"OzSword2", "CrystalSword2", "DragonAxe2"},
    ["WeaponShop7"] = {"BloodStaff2", "DualCrimsonStaff2", "GreatScythe2"},
    ["WeaponShop8"] = {"BeholderStaff2", "RuneAxe2", "DualDragonAxe2"},
    ["WeaponShop9"] = {"SteelSword2", "SteelSpear2", "EnergyGreatSword2"},
}

-- Função de compra
local function buyWeapon()
    if selectedShop and selectedWeapon ~= "" then
        local args = {
            [1] = {
                [1] = {
                    ["Action"] = "Buy",
                    ["Shop"] = selectedShop,
                    ["Item"] = selectedWeapon,
                    ["Event"] = "ItemShopAction"
                },
                [2] = "\n"
            }
        }
        remote:FireServer(unpack(args))
        print("Comprado:", selectedWeapon, "da loja:", selectedShop)
    end
end

-- Dropdown de Loja
Tabs.Shop:AddDropdown("ShopDropdown", {
    Title = "Select Shop",
    Values = {"WeaponShop1","WeaponShop2","WeaponShop3","WeaponShop4","WeaponShop5","WeaponShop6","WeaponShop7","WeaponShop8","WeaponShop9"},
    Default = selectedShop,
    Callback = function(shop)
        selectedShop = shop
        -- Atualizar armas disponíveis
        local weaponDropdown = Fluent.Options.WeaponDropdown
        if weaponDropdown then
            weaponDropdown:SetValues(weaponsByShop[shop] or {})
            if weaponsByShop[shop] and #weaponsByShop[shop] > 0 then
                selectedWeapon = weaponsByShop[shop][1]
                weaponDropdown:SetValue(selectedWeapon)
            end
        end
    end
})

-- Dropdown de Arma
Tabs.Shop:AddDropdown("WeaponDropdown", {
    Title = "Select Weapon",
    Values = weaponsByShop[selectedShop] or {},
    Default = weaponsByShop[selectedShop] and weaponsByShop[selectedShop][1] or "",
    Callback = function(weapon)
        selectedWeapon = weapon
    end
})

-- Botão Comprar Manual
Tabs.Shop:AddButton({
    Title = "Buy Selected Weapon",
    Callback = function() buyWeapon() end
})

-- Toggle Auto Buy
Tabs.Shop:AddToggle("AutoBuyWeapon", {
    Title = "Auto Buy Weapon",
    Default = false,
    Callback = function(state)
        autoBuyEnabled = state
        if state then
            task.spawn(function()
                while autoBuyEnabled do
                    buyWeapon()
                    task.wait(1)
                end
            end)
        end
    end
})
-- Variáveis do Player
local LocalPlayer = Players.LocalPlayer
local speedValue = 16
local jumpValue = 50
local speedEnabled = false
local jumpEnabled = false
local noclipEnabled = false
local antiAfkConnection

-- Função atualizar personagem
local function updateCharacter()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        local humanoid = LocalPlayer.Character.Humanoid
        humanoid.WalkSpeed = speedEnabled and speedValue or 16
        humanoid.JumpPower = jumpEnabled and jumpValue or 50
    end
end

-- Inputs Fluent
Tabs.Player:AddInput("SpeedInput", {
    Title = "Speed",
    Default = tostring(speedValue),
    Numeric = true,
    Finished = true,
    Callback = function(val)
        speedValue = tonumber(val) or 16
        updateCharacter()
    end
})

Tabs.Player:AddInput("JumpInput", {
    Title = "Jump Power",
    Default = tostring(jumpValue),
    Numeric = true,
    Finished = true,
    Callback = function(val)
        jumpValue = tonumber(val) or 50
        updateCharacter()
    end
})

-- Toggles Fluent
Tabs.Player:AddToggle("SpeedToggle", {
    Title = "Enable Speed",
    Default = false,
    Callback = function(state)
        speedEnabled = state
        updateCharacter()
    end
})

Tabs.Player:AddToggle("JumpToggle", {
    Title = "Enable Jump Power",
    Default = false,
    Callback = function(state)
        jumpEnabled = state
        updateCharacter()
    end
})

Tabs.Player:AddToggle("NoClipToggle", {
    Title = "Enable NoClip",
    Default = false,
    Callback = function(state)
        noclipEnabled = state
        if state then
            task.spawn(function()
                while noclipEnabled do
                    for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                    task.wait()
                end
            end)
        else
            for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end
})

Tabs.Player:AddToggle("AntiAfkToggle", {
    Title = "Anti AFK",
    Default = false,
    Callback = function(enabled)
        if enabled then
            if not antiAfkConnection then
                antiAfkConnection = LocalPlayer.Idled:Connect(function()
                    local vu = game:GetService("VirtualUser")
                    vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
                    task.wait(1)
                    vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
                end)
            end
        else
            if antiAfkConnection then
                antiAfkConnection:Disconnect()
                antiAfkConnection = nil
            end
        end
    end
})

-- Botão Boost FPS
Tabs.Player:AddButton({
    Title = "Boost FPS",
    Callback = function()
        for _, v in pairs(game:GetDescendants()) do
            if v:IsA("ParticleEmitter") or v:IsA("Smoke") or v:IsA("Fire") or v:IsA("Sparkles") then
                v.Enabled = false
            end
            if v:IsA("PostEffect") or v:IsA("BloomEffect") or v:IsA("BlurEffect") or v:IsA("SunRaysEffect") then
                v.Enabled = false
            end
        end
        settings().Rendering.QualityLevel = 1
    end
})

-- Botão Server Hop
Tabs.Player:AddButton({
    Title = "Server Hop",
    Callback = function()
        local PlaceID = game.PlaceId
        local servers = game.HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/"..PlaceID.."/servers/Public?sortOrder=Asc&limit=100"))
        for _, server in pairs(servers.data) do
            if server.playing < server.maxPlayers then
                game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, server.id, LocalPlayer)
                break
            end
        end
    end
})
-- Aba Info
Tabs.Info:AddButton({
    Title = "Copy Discord Link",
    Callback = function()
        setclipboard("https://discord.gg/v94FqK3zH5")
        Fluent:Notify({
            Title = "Discord",
            Content = "Link copiado para o clipboard!",
            Duration = 3
        })
    end
})

Tabs.Info:AddButton({
    Title = "Sobre o Script",
    Callback = function()
        Fluent:Notify({
            Title = "Allan Hub",
            Content = "Script criado e otimizado para Arise Crossover",
            Duration = 4
        })
    end
})

-- Aba Settings
Tabs.Settings:AddButton({
    Title = "Reset Config",
    Callback = function()
        SaveManager:Delete("AutoSave_" .. player.Name)
        Fluent:Notify({
            Title = "Configuração",
            Content = "Todas as configurações foram resetadas!",
            Duration = 4
        })
    end
})

Tabs.Settings:AddButton({
    Title = "Salvar Agora",
    Callback = function()
        SaveManager:Save("AutoSave_" .. player.Name)
        Fluent:Notify({
            Title = "Configuração",
            Content = "Configurações salvas manualmente!",
            Duration = 3
        })
    end
})

Tabs.Settings:AddButton({
    Title = "Carregar Configuração",
    Callback = function()
        SaveManager:Load("AutoSave_" .. player.Name)
        Fluent:Notify({
            Title = "Configuração",
            Content = "Configurações carregadas!",
            Duration = 3
        })
    end
})

-- Auto Save
task.spawn(function()
    while task.wait(10) do
        pcall(function()
            SaveManager:Save("AutoSave_" .. player.Name)
        end)
    end
end)

-- Mensagem inicial
Fluent:Notify({
    Title = "Allan Hub",
    Content = "Script iniciado com sucesso!\nConfig salva como AutoSave_" .. player.Name,
    Duration = 5
})