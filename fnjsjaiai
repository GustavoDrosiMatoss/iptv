ConfigSystem.CurrentConfig = {}

-- Fun√ß√£o para criar pastas
ConfigSystem.CreateFolders = function()
    local success = pcall(function()
        if makefolder then
            if not isfolder(ConfigSystem.Folder) then
                makefolder(ConfigSystem.Folder)
            end
            if not isfolder(ConfigSystem.Folder .. "/" .. ConfigSystem.SubFolder) then
                makefolder(ConfigSystem.Folder .. "/" .. ConfigSystem.SubFolder)
            end
        end
    end)
    return success
end

-- Fun√ß√£o para salvar config
ConfigSystem.SaveConfig = function()
    ConfigSystem.CreateFolders()
    local jsonData = HttpService:JSONEncode(ConfigSystem.CurrentConfig)
    local success, err = pcall(function()
        if writefile then
            writefile(ConfigSystem.FilePath, jsonData)
            return true
        end
        return false
    end)
    if success then
        print("Configura√ß√£o salva com sucesso em: " .. ConfigSystem.FilePath)
        return true
    else
        warn("Falha ao salvar configura√ß√£o:", err)
        return false
    end
end

-- Fun√ß√£o para carregar config
ConfigSystem.LoadConfig = function()
    local success, content = pcall(function()
        if readfile and isfile and isfile(ConfigSystem.FilePath) then
            return readfile(ConfigSystem.FilePath)
        end
        return nil
    end)

    if success and content then
        local data
        success, data = pcall(function()
            return HttpService:JSONDecode(content)
        end)

        if success and data then
            ConfigSystem.CurrentConfig = data
            print("Configura√ß√£o carregada de: " .. ConfigSystem.FilePath)
            return true
        else
            warn("Erro ao analisar configura√ß√£o, criando nova.")
        end
    end

    ConfigSystem.CurrentConfig = table.clone(ConfigSystem.DefaultConfig)
    ConfigSystem.SaveConfig()
    print("Inicializando nova configura√ß√£o")
    return false
end

-- Carregar configura√ß√£o
ConfigSystem.LoadConfig()

-- Auto save
local function setupAutoSave()
    spawn(function()
        while wait(5) do
            pcall(function()
                ConfigSystem.SaveConfig()
            end)
        end
    end)
end
setupAutoSave()
        ConfigSystem.SaveConfig()
        if state then entrarCastelo() end
    end
})

Tabs.Castle:AddToggle("ToggleAutoDungeon", {
    Title = "Auto Dungeon", 
    Description = "Cria/Inicia/Reseta automaticamente",
    Default = ativarDungeon,
    Callback = function(state)
        ativarDungeon = state
        ConfigSystem.CurrentConfig.AutoDungeon = state
        salvarConfigCastelo()
        ConfigSystem.SaveConfig()
        if state then 
            task.spawn(autoDungeonLoop)
        end
    end
})

Tabs.Castle:AddToggle("ToggleUseGems", {
    Title = "Usar Gems para Reset",
    Description = "Compra ticket com gems para resetar", 
    Default = ativarGems,
    Callback = function(state)
        ativarGems = state
        ConfigSystem.CurrentConfig.UseGems = state
        salvarConfigCastelo()
        ConfigSystem.SaveConfig()
    end
})

Tabs.Castle:AddButton({
    Title = "üîÑ Reset Dungeon Status",
    Description = "Limpa flags de dungeon",
    Callback = function()
        dungeonActive = false
        salvarConfigCastelo()
        safeDelete(tempFile)
        print("üîÑ Status da dungeon resetado!")
    end
})
-- ===== TAB STATUS =====
local statusParagraph = Tabs.Status:AddParagraph({
    Title = "Status Atual",
    Content = "Aguardando..."
})

local function updateStatus()
    local status = string.format([[
üè∞ Em Castelo: %s
‚öîÔ∏è Em Dungeon: %s  
üëπ Mobs Vivos: %s
üéØ Dungeon Ativa: %s
üîÑ Auto Dungeon: %s
üìç Andar Atual: %s
]], 
        ativarEvento and "‚úÖ" or "‚ùå",
        isInDungeon() and "‚úÖ" or "‚ùå",
        mobsVivos() and "‚úÖ" or "‚ùå", 
        dungeonActive and "‚úÖ" or "‚ùå",
        ativarDungeon and "‚úÖ" or "‚ùå",
        currentFloor or "N/A"
    )
    statusParagraph:SetDesc(status)
end

task.spawn(function()
    while true do
        updateStatus()
        task.wait(2)
    end
end)

-- ===== CONFIGURA√á√ïES =====
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

local playerName = game:GetService("Players").LocalPlayer.Name
InterfaceManager:SetFolder("Allan Hub")
SaveManager:SetFolder("Allan Hub/AriseCrossover/" .. playerName)

Tabs.Settings:AddParagraph({
    Title = "C·∫•u h√¨nh t·ª± ƒë·ªông",
    Content = "C·∫•u h√¨nh c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c t·ª± ƒë·ªông l∆∞u theo t√™n nh√¢n v·∫≠t: " .. playerName
})

Window:SelectTab(1)

Fluent:Notify({
    Title = "Allan Hub",
    Content = "Script modificado carregado com sucesso!",
    Duration = 3
})

-- Autostart se estiver ativo no config
if ativarEvento then entrarCastelo() end
if ativarDungeon then task.spawn(autoDungeonLoop) end

print("‚úÖ Allan Hub Arise Modified carregado com sucesso!")